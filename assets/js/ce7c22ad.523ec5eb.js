"use strict";(self.webpackChunkdocu_dev=self.webpackChunkdocu_dev||[]).push([[4016],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>b});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),s=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},d=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),p=s(r),m=a,b=p["".concat(l,".").concat(m)]||p[m]||u[m]||i;return r?n.createElement(b,o(o({ref:t},d),{},{components:r})):n.createElement(b,o({ref:t},d))}));function b(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=m;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[p]="string"==typeof e?e:a,o[1]=c;for(var s=2;s<i;s++)o[s]=r[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},7090:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>c,toc:()=>s});var n=r(7462),a=(r(7294),r(3905));const i={id:"oracle",sidebar_label:"Oracle"},o="Introduction",c={unversionedId:"build/oracle",id:"build/oracle",title:"Introduction",description:"Oracles are devices or entities that connect a blockchain network to the outside world.",source:"@site/docs/build/oracle.mdx",sourceDirName:"build",slug:"/build/oracle",permalink:"/docs/build/oracle",draft:!1,editUrl:"https://github.com/massalabs/docs/tree/main/docs/build/oracle.mdx",tags:[],version:"current",lastUpdatedBy:"Peterjah",lastUpdatedAt:1752152984,formattedLastUpdatedAt:"Jul 10, 2025",frontMatter:{id:"oracle",sidebar_label:"Oracle"},sidebar:"buildSidebar",previous:{title:"Standards",permalink:"/docs/build/standards"}},l={},s=[{value:"Available Price feeds",id:"available-price-feeds",level:2},{value:"Deployed Smart contracts",id:"deployed-smart-contracts",level:2}],d={toc:s},p="wrapper";function u(e){let{components:t,...r}=e;return(0,a.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"introduction"},"Introduction"),(0,a.kt)("p",null,"Oracles are devices or entities that connect a blockchain network to the outside world.\nThey enable smart contracts to access all kinds of off-chain information by entering every data input through an external transaction."),(0,a.kt)("h1",{id:"umbrella"},"Umbrella"),(0,a.kt)("h2",{id:"available-price-feeds"},"Available Price feeds"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://umbrella-network.github.io/technical-documentation/umbrella-network/docs/price-feeds.html"},"https://umbrella-network.github.io/technical-documentation/umbrella-network/docs/price-feeds.html")),(0,a.kt)("h2",{id:"deployed-smart-contracts"},"Deployed Smart contracts"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://umbrella-network.github.io/technical-documentation/umbrella-network/docs/umb-token-contracts.html#contract-registry"},"https://umbrella-network.github.io/technical-documentation/umbrella-network/docs/umb-token-contracts.html#contract-registry")),(0,a.kt)("h1",{id:"example-fetching-a-price-feed"},"Example: fetching a price feed"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import keccak256 from '@indeliblelabs/keccak256';\nimport {\n  Args,\n  IDeserializedResult,\n  ISerializable,\n  JsonRpcPublicProvider,\n} from '@massalabs/massa-web3';\n\nexport class PriceData implements ISerializable<PriceData> {\n  constructor(\n    private data = 0n,\n    private heartbeat = 0n,\n    private timestamp = 0n,\n    private price = 0n,\n  ) {}\n\n  serialize(): Uint8Array {\n    let args = new Args()\n      .addU8(this.data)\n      .addU32(this.heartbeat)\n      .addU32(this.timestamp)\n      .addU128(this.price);\n    return new Uint8Array(args.serialize());\n  }\n  deserialize(\n    data: Uint8Array,\n    offset: number,\n  ): IDeserializedResult<PriceData> {\n    const args = new Args(data, offset);\n    this.data = args.nextU8();\n    this.heartbeat = args.nextU32();\n    this.timestamp = args.nextU32();\n    this.price = args.nextU128();\n    return { instance: this, offset: args.getOffset() };\n  }\n}\n\nconst RegistryContract = 'AS1xBPxEPYoqnXEgC2nJN5s6oeJdKobVqZF3CTvSQCtK582fSDhR';\nconst publicProvider = JsonRpcPublicProvider.mainnet();\n\nlet resp = await publicProvider.readSC({\n  target: RegistryContract,\n  func: 'getAddressByString',\n  parameter : new Args().addString('UmbrellaFeeds'),\n});\n\nconst UMBPriceFeedContract = new Args(resp.value).nextString();\n\nconsole.log('UMBPriceFeedContract:', UMBPriceFeedContract);\n\nconst pairhash = keccak256('BTC-USD');\nconst parameter = new Args().addUint8Array(new Uint8Array(pairhash));\n\nresp = await publicProvider.readSC({\n  target: UMBPriceFeedContract,\n  func: 'getPriceData',\n  parameter,\n});\n\nconst priceData = new Args(resp.value).nextSerializable(PriceData);\nconsole.log('priceData:', priceData);\n")))}u.isMDXComponent=!0}}]);