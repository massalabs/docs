"use strict";(self.webpackChunkdocu_dev=self.webpackChunkdocu_dev||[]).push([[9649],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>f});var n=a(7294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var o=n.createContext({}),c=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},d=function(e){var t=c(e.components);return n.createElement(o.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,r=e.originalType,o=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=c(a),p=l,f=u["".concat(o,".").concat(p)]||u[p]||m[p]||r;return a?n.createElement(f,s(s({ref:t},d),{},{components:a})):n.createElement(f,s({ref:t},d))}));function f(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=a.length,s=new Array(r);s[0]=p;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i[u]="string"==typeof e?e:l,s[1]=i;for(var c=2;c<r;c++)s[c]=a[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},8420:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var n=a(7462),l=(a(7294),a(3905));const r={id:"async",sidebar_label:"Autonomous smart contracts"},s="Autonomous smart contracts (ASC)",i={unversionedId:"build/smart-contract/async",id:"build/smart-contract/async",title:"Autonomous smart contracts (ASC)",description:"Autonomous smart contracts (ASC) are a set of features that allow smart contracts to be executed asynchronously.",source:"@site/docs/build/smart-contract/async.mdx",sourceDirName:"build/smart-contract",slug:"/build/smart-contract/async",permalink:"/docs/build/smart-contract/async",draft:!1,editUrl:"https://github.com/massalabs/docs/tree/main/docs/build/smart-contract/async.mdx",tags:[],version:"current",lastUpdatedBy:"Peterjah",lastUpdatedAt:1752152984,formattedLastUpdatedAt:"Jul 10, 2025",frontMatter:{id:"async",sidebar_label:"Autonomous smart contracts"},sidebar:"buildSidebar",previous:{title:"Events",permalink:"/docs/build/smart-contract/basic-concepts/events"},next:{title:"Introduction",permalink:"/docs/build/massa-web3/intro"}},o={},c=[{value:"Async Call overview",id:"async-call-overview",level:2},{value:"Execution Behavior:",id:"execution-behavior",level:3},{value:"Optional Execution Filter:",id:"optional-execution-filter",level:3},{value:"Filter Parameters:",id:"filter-parameters",level:3},{value:"Execution Conditions:",id:"execution-conditions",level:3},{value:"Usage example",id:"usage-example",level:3},{value:"Deferred calls",id:"deferred-calls",level:2},{value:"Request a quote",id:"request-a-quote",level:3},{value:"Register a deferred call",id:"register-a-deferred-call",level:3},{value:"Cancel a deferred call",id:"cancel-a-deferred-call",level:3},{value:"Check deferred call status",id:"check-deferred-call-status",level:3},{value:"Find a slot to book",id:"find-a-slot-to-book",level:3},{value:"Usage example",id:"usage-example-1",level:3}],d={toc:c},u="wrapper";function m(e){let{components:t,...a}=e;return(0,l.kt)(u,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"autonomous-smart-contracts-asc"},"Autonomous smart contracts (ASC)"),(0,l.kt)("p",null,"Autonomous smart contracts (ASC) are a set of features that allow smart contracts to be executed asynchronously.\nIt allow a smart contract to be scheduled in the future in a decentralized way.\nThese features enable developers to build more complex and powerful decentralized applications on the Massa blockchain."),(0,l.kt)("p",null,"Two different types of ASC are available in Massa:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/learn/asc/massa-asc#async-messages-allowing-smart-contracts-to-emit-operation-like-messages"},"Async calls")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/learn/asc/massa-asc#deferred-calls-scheduling-future-calls-with-guaranteed-execution"},"Deferred calls"))),(0,l.kt)("p",null,"The main difference between them is the guarantee of execution. Deferred calls are guaranteed while async messages are not.\nIn both cases, a smart contract function will be called and executed if conditions are met.\nAn ASC call follow the same execution parameters as a regular smart contract call (including coins, maxGas, fee and function arguments)."),(0,l.kt)("h2",{id:"async-call-overview"},"Async Call overview"),(0,l.kt)("p",null,"The ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/massalabs/massa-as-sdk/blob/main/assembly/std/contract/calls.ts#L204"},"asyncCall")," function enables scheduling an operation for execution at a future time. The operation is processed as soon as possible after the specified start slot but no later than the end slot."),(0,l.kt)("h3",{id:"execution-behavior"},"Execution Behavior:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Operations are executed deterministically on all nodes."),(0,l.kt)("li",{parentName:"ul"},"Execution follows a priority system based on the fee attached to the message."),(0,l.kt)("li",{parentName:"ul"},"If an async operation has a low fee/maxGas ratio, it may be delayed if higher-fee async operation take priority."),(0,l.kt)("li",{parentName:"ul"},"If all slots in the specified period are congested with higher-fee async operations, it may never execute.")),(0,l.kt)("h3",{id:"optional-execution-filter"},"Optional Execution Filter:"),(0,l.kt)("p",null,'You can add a filter condition that requires a state update before the operation executes. Instead of executing "as soon as possible within the range", the operation will execute only after a specific state change occurs.'),(0,l.kt)("h3",{id:"filter-parameters"},"Filter Parameters:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"filterAddress: The contract or account whose state change will trigger execution."),(0,l.kt)("li",{parentName:"ul"},"filterKey: A specific datastore entry within filterAddress that must change. filterAddress must be provided.")),(0,l.kt)("h3",{id:"execution-conditions"},"Execution Conditions:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"If only filterAddress is provided:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"The message executes within the specified range only if there is a state change (e.g., balance update) in filterAddress."))),(0,l.kt)("li",{parentName:"ul"},"If filterKey is also provided:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"The message executes within the range only if the specific filterKey in filterAddress's datastore has changed.")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"asyncCall(\n  at: Address,\n  functionName: string,\n  validityStartSlot: Slot,\n  validityEndSlot: Slot,\n  maxGas: u64,\n  fee: u64,\n  functionParams: StaticArray<u8> = [],\n  coins: u64 = 0,\n  filterAddress: Address = new Address(),\n  filterKey: StaticArray<u8> = [],\n  ): void\n")),(0,l.kt)("p",null,"Parameters:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"at"),": Address of the contract to call."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"functionName"),": Function to call in the contract."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"validityStartSlot"),": Validity start slot."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"validityEndSlot"),": Validity end slot."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"maxGas"),": Maximum gas to spend for the execution."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"fee"),": Fee to be paid for message execution."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"functionParams"),": Serialized function call parameters."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"coins"),": Coins to allocate for the execution. If called function is on the same contract, this field has no effect as sender and recipient are the same."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"filterAddress"),": Address trigger filter."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"filterKey"),": Datastore key filter from the trigger address.")),(0,l.kt)("h3",{id:"usage-example"},"Usage example"),(0,l.kt)("p",null,"Syntra leverage the async call feature to allow sending tips or setup vesting plans for users.\nCheck ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/massalabs/syntra/blob/main/smart-contract/assembly/internal.ts#L76"},"Syntra smart contract")," for a real world example of async call usage."),(0,l.kt)("h2",{id:"deferred-calls"},"Deferred calls"),(0,l.kt)("p",null,"Unlike async calls, deferred calls are guaranteed to be executed at a given slot.\nThe scheduele mecanism works as a booking market based on computation needs and load of available slots.\nIn order to book for an execution in the future, a user must pay a fee to the network.\nThe booking quote is calculated based on the amount of computation needed, the size of function call parameters in bytes and the load of the network."),(0,l.kt)("h3",{id:"request-a-quote"},"Request a quote"),(0,l.kt)("p",null,"The ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/massalabs/massa-as-sdk/blob/main/assembly/std/deferredCalls.ts#L17"},"deferredCallQuote")," function is used to get the booking fee for a deferred call. The quote provides an estimate of the fee required to schedule the deferred call for the given slot."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"deferredCallQuote(\n  targetSlot: Slot,\n  maxGas: u64,\n  paramsSize: u64 = 0,\n): u64\n")),(0,l.kt)("p",null,"Parameters:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"targetSlot"),": Slot to book for the execution."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"maxGas"),": The maximum amount of gas that the deferred call can use."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"paramsSize"),": Serialized function call parameters size in bytes.")),(0,l.kt)("p",null,"Returns:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The booking quote in nanoMAS for the deferred call.")),(0,l.kt)("h3",{id:"register-a-deferred-call"},"Register a deferred call"),(0,l.kt)("p",null,"The ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/massalabs/massa-as-sdk/blob/main/assembly/std/deferredCalls.ts#L42"},"deferredCallRegister")," function is used to book a deferred call."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"deferredCallRegister(\n  targetAddress: string,\n  targetFunction: string,\n  targetSlot: Slot,\n  maxGas: u64,\n  params: StaticArray<u8> = [],\n  coins: u64 = 0,\n): string\n")),(0,l.kt)("p",null,"Parameters:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"targetAddress"),": Address of the contract to call."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"targetFunction"),": Function to call in the contract."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"targetSlot"),": Slot to book for the execution."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"maxGas"),": The maximum amount of gas that the deferred call can use."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"params"),": Serialized function call parameters."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"coins"),": Coins to allocate for the execution. If called function is on the same contract, this field has no effect as sender and recipient are the same.")),(0,l.kt)("p",null,"Returns:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The created deferred call ID.")),(0,l.kt)("h3",{id:"cancel-a-deferred-call"},"Cancel a deferred call"),(0,l.kt)("p",null,"The ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/massalabs/massa-as-sdk/blob/main/assembly/std/deferredCalls.ts#L79"},"deferredCallCancel")," function is used to cancel a deferred call.\nA deferred call can only be canceled by its creator.\nTo avoid booking market manipulation, the booking fee is not refunded and reserved gas for execution is not freed when canceling."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"deferredCallCancel(id: string): void\n")),(0,l.kt)("p",null,"Parameters:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"id"),": The deferred call ID to cancel.")),(0,l.kt)("h3",{id:"check-deferred-call-status"},"Check deferred call status"),(0,l.kt)("p",null,"The ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/massalabs/massa-as-sdk/blob/main/assembly/std/deferredCalls.ts#L68"},"deferredCallExists")," function is used to check if a deferred call is schedueled."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"deferredCallExists(id: string): bool\n")),(0,l.kt)("p",null,"Parameters:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"id"),": The deferred call ID to check.")),(0,l.kt)("p",null,"Returns:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"True if the deferred call is schedueled. False if already executed, canceled or inexistant.")),(0,l.kt)("h3",{id:"find-a-slot-to-book"},"Find a slot to book"),(0,l.kt)("p",null,"The ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/massalabs/massa-as-sdk/blob/main/assembly/std/deferredCalls.ts#L92"},"findCheapestSlot")," function is a helper that compares the booking quotes in a given slot range and returns the cheapest one."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"findCheapestSlot(\n  startPeriod: u64,\n  endPeriod: u64,\n  maxGas: u64,\n  paramsSize: u64,\n): Slot\n")),(0,l.kt)("p",null,"Parameters:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"startPeriod"),": First slot to check."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"endPeriod"),": Last slot to check."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"maxGas"),": The maximum amount of gas that the deferred call can use."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"paramsSize"),": Serialized function call parameters size in bytes.")),(0,l.kt)("p",null,"Returns:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The slot with the cheapest quote in the given range.")),(0,l.kt)("h3",{id:"usage-example-1"},"Usage example"),(0,l.kt)("p",null,"Deferred call manager is a smart contract example that allow to schedule tasks in the future and monitor execuions.\nCheck Deferred call manager contract ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/massalabs/massa-sc-examples/blob/main/deferred-call-manager/README.md"},"here"),"."))}m.isMDXComponent=!0}}]);