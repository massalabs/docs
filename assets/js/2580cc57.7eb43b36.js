"use strict";(self.webpackChunkdocu_dev=self.webpackChunkdocu_dev||[]).push([[6489],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>k});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),s=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),c=s(a),h=r,k=c["".concat(l,".").concat(h)]||c[h]||m[h]||o;return a?n.createElement(k,i(i({ref:t},d),{},{components:a})):n.createElement(k,i({ref:t},d))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=h;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[c]="string"==typeof e?e:r,i[1]=p;for(var s=2;s<o;s++)i[s]=a[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},1909:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>p,toc:()=>s});var n=a(7462),r=(a(7294),a(3905));const o={id:"basic-concepts",sidebar_label:"Basic concepts"},i="Basic concepts",p={unversionedId:"learn/architecture/basic-concepts",id:"learn/architecture/basic-concepts",title:"Basic concepts",description:"Let's dive into the basic definitions and concepts of Massa blockchain.",source:"@site/docs/learn/architecture/basic-concepts.mdx",sourceDirName:"learn/architecture",slug:"/learn/architecture/basic-concepts",permalink:"/docs/learn/architecture/basic-concepts",draft:!1,editUrl:"https://github.com/massalabs/docu-dev/tree/main/docs/learn/architecture/basic-concepts.mdx",tags:[],version:"current",lastUpdatedBy:"Adrien LF",lastUpdatedAt:1694174853,formattedLastUpdatedAt:"Sep 8, 2023",frontMatter:{id:"basic-concepts",sidebar_label:"Basic concepts"},sidebar:"learnSidebar",previous:{title:"Welcome to Massa",permalink:"/docs/learn/introduction"},next:{title:"Node architecture",permalink:"/docs/learn/architecture/node-architecture"}},l={},s=[{value:"Ledger",id:"ledger",level:2},{value:"Address",id:"address",level:2},{value:"Smart Contract",id:"smart-contract",level:2},{value:"Autonomous Smart Contract Execution",id:"autonomous-smart-contract-execution",level:3},{value:"Storage costs",id:"storage-costs",level:2},{value:"Gas",id:"gas",level:2},{value:"Block",id:"block",level:2},{value:"Operation",id:"operation",level:2},{value:"Operation types",id:"operation-types",level:3},{value:"Transaction operations",id:"transaction-operations",level:4},{value:"Buy/Sell Rolls operations",id:"buysell-rolls-operations",level:4},{value:"Smart Contract operations",id:"smart-contract-operations",level:4},{value:"Operation lifecycle",id:"operation-lifecycle",level:3},{value:"Operation format and legality",id:"operation-format-and-legality",level:4},{value:"Operation",id:"operation-1",level:5},{value:"Operation contents hash",id:"operation-contents-hash",level:5},{value:"Operation ID",id:"operation-id",level:5},{value:"Signature",id:"signature",level:5},{value:"Secret key",id:"secret-key",level:5},{value:"Public key",id:"public-key",level:5},{value:"Address",id:"address-1",level:5},{value:"Coin amounts",id:"coin-amounts",level:5},{value:"Operation contents",id:"operation-contents",level:5},{value:"Transaction operation payload",id:"transaction-operation-payload",level:6},{value:"RollBuy operation payload",id:"rollbuy-operation-payload",level:6},{value:"RollSell operation payload",id:"rollsell-operation-payload",level:6},{value:"ExecuteSC operation payload",id:"executesc-operation-payload",level:6},{value:"CallSC operation payload",id:"callsc-operation-payload",level:6},{value:"Example of legal operation with valid signature",id:"example-of-legal-operation-with-valid-signature",level:5},{value:"Operation propagation",id:"operation-propagation",level:4},{value:"Operation submission",id:"operation-submission",level:5},{value:"Operation broadcasting",id:"operation-broadcasting",level:5},{value:"Operation retrieval",id:"operation-retrieval",level:5},{value:"Operation propagation within blocks",id:"operation-propagation-within-blocks",level:5},{value:"Operation execution",id:"operation-execution",level:4},{value:"Operation pool and operation inclusion",id:"operation-pool-and-operation-inclusion",level:4},{value:"Operation execution status and finality",id:"operation-execution-status-and-finality",level:4},{value:"Endorsements",id:"endorsements",level:3}],d={toc:s},c="wrapper";function m(e){let{components:t,...o}=e;return(0,r.kt)(c,(0,n.Z)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"basic-concepts"},"Basic concepts"),(0,r.kt)("p",null,"Let's dive into the basic definitions and concepts of Massa blockchain."),(0,r.kt)("p",null,"The goal of the Massa network is to build a consensus between ",(0,r.kt)("strong",{parentName:"p"},"nodes")," to gather\nand order ",(0,r.kt)("strong",{parentName:"p"},"blocks")," that contain ordered lists of ",(0,r.kt)("strong",{parentName:"p"},"operations"),".\nAn operation ultimate purpose once executed is to act as transitions for the global network state, called the ",(0,r.kt)("strong",{parentName:"p"},"ledger"),"."),(0,r.kt)("p",null,"Operations are produced by external clients and sent to the Massa network via a node.\nSome operations are containing code to be run as ",(0,r.kt)("strong",{parentName:"p"},"smart contracts"),", enabling complex programmatic\nmodifications of the ledger.\nNodes gather pending operations and group them into blocks. Each block has limited space to store operations.\nTraditional blockchains typically link blocks sequentially, including a hash of the previous block in the block\nheader for temporal ordering. In contrast, Massa blocks are organized into a complex spatio-temporal structure,\nenabling parallelization and improved block-creation performance."),(0,r.kt)("p",null,"Instead of one chain, there are exactly 32 ",(0,r.kt)("strong",{parentName:"p"},"threads")," of chains running in parallel, with blocks equally\nspread on each thread over time, and stored inside ",(0,r.kt)("strong",{parentName:"p"},"slots")," that are spaced at fixed time intervals:"),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(812).Z,width:"887",height:"387"})),(0,r.kt)("p",null,"The time between two slots located on the same thread is called a ",(0,r.kt)("strong",{parentName:"p"},"period")," and lasts 16s (conventionally called ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("msub",{parentName:"mrow"},(0,r.kt)("mi",{parentName:"msub"},"t"),(0,r.kt)("mn",{parentName:"msub"},"0"))),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"t_0")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.7651em",verticalAlign:"-0.15em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,r.kt)("span",{parentName:"span",className:"msupsub"},(0,r.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3011em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"0em",marginRight:"0.05em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},"0")))),(0,r.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,r.kt)("span",{parentName:"span"})))))))))),").\nCorresponding slots in threads are slightly shifted in time relative to one another, by one period divided by the number\nof threads, which is ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mn",{parentName:"mrow"},"16"),(0,r.kt)("mi",{parentName:"mrow"},"s"),(0,r.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"/"),(0,r.kt)("mn",{parentName:"mrow"},"32"),(0,r.kt)("mo",{parentName:"mrow"},"="),(0,r.kt)("mn",{parentName:"mrow"},"0.5"),(0,r.kt)("mi",{parentName:"mrow"},"s")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"16s/32 = 0.5s")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},"16"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"s"),(0,r.kt)("span",{parentName:"span",className:"mord"},"/32"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},"="),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},"0.5"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"s"))))),", so that a period contains exactly 32 slots equally spaced over the 32 threads.\nA ",(0,r.kt)("strong",{parentName:"p"},"cycle")," is defined as the succession of 128 periods and so lasts a bit more than 34min. Periods are numbered by\nincrements of one, so can be used together with a thread number to uniquely identify a block slot. Period 0 is the\ngenesis and contains genesis blocks with no parents."),(0,r.kt)("p",null,"The job of the Massa nodes network is to essentially collectively fill up slots with valid blocks. To do so,\nat each interval of 0.5s, a specific node in the network is elected to be allowed to create a block (more about\nthe selection process and the proof of stake sybil resistance mechanism ",(0,r.kt)("a",{parentName:"p",href:"/docs/learn/architecture/node-architecture#selector-module-proof-of-stake-sybil-resistance"},"here"),"),\nand will be rewarded if it creates a valid block in time. It is also possible that a node misses its opportunity\nto create the block, in which case the slot will remain empty (this is called a ",(0,r.kt)("strong",{parentName:"p"},"block miss"),")."),(0,r.kt)("p",null,"In traditional blockchains, blocks are simply referencing their unique parent, forming a chain. In the case of\nMassa, each block is referencing one parent block in each thread (so, 32 parents). Here is an example\nillustrated with one particular block:"),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(2776).Z,width:"887",height:"328"})),(0,r.kt)("p",null,"Let\u2019s introduce some relevant definitions and concepts generally necessary to understand how the Massa network operates.\nWe will then explain the node architecture and how the whole system works."),(0,r.kt)("h2",{id:"ledger"},"Ledger"),(0,r.kt)("p",null,"The ledger is a map that stores a global mapping between addresses and information related to these addresses.\nIt is replicated in each node. The consensus building mechanism ensures that agreement on what operations have\nbeen finalized (and in what order) will be reached over the whole network. The ledger is the state of the Massa network,\nand operations (see below) are requests to modify the ledger. "),(0,r.kt)("p",null,"The information stored in the ledger with each address is the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",colSpan:2,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Ledger Information Associated with Each Address")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"balance"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"The amount of Massa coins owned by the address."))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"bytecode"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"When the address references a smart contract, this is the compiled code corresponding to the smart contract (typically contains several functions that act as API entry points)."))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"datastore"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"A key/value map that can store any persistent data related to a smart contract, its variables, etc."))))),(0,r.kt)("p",null,"In order to promote widespread adoption and facilitate node running with reduced entry fees, the size of the ledger in Massa\nhas been limited to a maximum of 1 TB.\nThis decision sets Massa apart from other benchmark blockchain ledgers and makes it more accessible to users."),(0,r.kt)("p",null,"To achieve such a small ledger size, several technical decisions were made.\nFirstly, state changes that have been finalized and are found in the final Blocks no longer require record-keeping in the Ledger's memory.\nThis optimization helps minimize the storage requirements for historical data, allowing the ledger to operate efficiently within the specified size limit."),(0,r.kt)("p",null,"In addition to this, Massa has introduced ",(0,r.kt)("a",{parentName:"p",href:"/docs/learn/storage-costs"},"Storage Costs")," as a novel approach to enhance storage efficiency.\nUsers are now required to lock a certain amount of coins when they claim storage space.\nThis innovative correlation between storage and circulating coins ensures a balanced utilization of resources.\nBy implementing this mechanism, Massa optimizes storage utilization while maintaining the integrity and security of the ledger."),(0,r.kt)("p",null,"These technical decisions, including the exclusion of finalized state changes from ledger memory and the introduction of Storage\nCosts, play a crucial role in enabling the compact size of the ledger and ultimately facilitating a more efficient and accessible\nblockchain ecosystem."),(0,r.kt)("h2",{id:"address"},"Address"),(0,r.kt)("p",null,"An address on the Massa blockchain serves as your unique identity, granting you the ability to engage in various operations,\nstore information, and exchange data with other participants. With an address, you gain access to a wide range of functionalities\nwithin the blockchain ecosystem."),(0,r.kt)("p",null,"Using your address, you can initiate operations that interact with the blockchain.\nThis includes executing transactions, submitting smart contract calls, and engaging in other blockchain activities.\nYour address acts as the key to unlock these capabilities, allowing you to participate fully in the decentralized network."),(0,r.kt)("p",null,"Furthermore, your address enables you to store and retrieve information on the blockchain. Whether it's personal data, financial records, or any other form of digital information, you can securely store it using your address as the reference. This provides a reliable and immutable storage solution within the blockchain environment."),(0,r.kt)("p",null,"Importantly, your address also facilitates communication and data exchange with other participants on the blockchain.\nBy sharing your address with others, you can interact, transact, and collaborate with different individuals and entities\nwithin the blockchain network.\nThis seamless exchange of data and value promotes a decentralized and interconnected ecosystem."),(0,r.kt)("p",null,"Each user address on Massa has a public and private key associated with it.\nThis is how messages can be signed and identity enforced.\nThe address of an account is simply the hash of its public key. "),(0,r.kt)("p",null,"Addresses are generated using a specific format that includes a prefix ",(0,r.kt)("inlineCode",{parentName:"p"},"A")," and a base58 encoding. The prefix distinguishes between user addresses, linked to a KeyPair, and smart-contract addresses, denoted by the prefixes ",(0,r.kt)("inlineCode",{parentName:"p"},"U")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"S")," respectively."),(0,r.kt)("p",null,"For user addresses (AU), the hash calculation involves taking the Blake3 hash of the byte representation of\nthe user's public key.\nThis process ensures a unique and secure identification for each user address within the system."),(0,r.kt)("h2",{id:"smart-contract"},"Smart Contract"),(0,r.kt)("p",null,"Smart contracts are a piece of code that can be run inside the Massa virtual machine, which can modify the ledger,\nand accept incoming requests through a public interface (via smart-contract operations). "),(0,r.kt)("p",null,"Smart contracts are currently written in AssemblyScript, a derivation from TypeScript, which is itself a\ntype-safe version of JavaScript. AssemblyScript compiles to WebAssembly bytecode (wasm). Massa nodes Execution Module runs such bytecode.\nSmart contracts have access to their own datastore, so they can modify the ledger."),(0,r.kt)("p",null,"Smart contracts follow a different hash calculation than user addresses. It begins by constructing a byte array comprising various elements.\nThis array consists of the slot represented in 5 bytes, with 4 bytes allocated for the period (encoded as a u64 in big endian\nformat), 1 byte for the thread, and an index that increments for each address created within the same slot.\nThe index value is represented as a u64 in big endian format and is reset at the start of each new slot.\nAdditionally, a single byte is appended to indicate whether the address is for real execution (1) or read-only execution (0)."),(0,r.kt)("p",null,"The resulting byte array is then subject to the Blake3 hash function, generating a unique\nhash value that serves as the SC address."),(0,r.kt)("h3",{id:"autonomous-smart-contract-execution"},"Autonomous Smart Contract Execution"),(0,r.kt)("p",null,"One particularity of Massa smart contracts compared to other blockchain smart contracts is their ability to wake\nup by themselves independently of an exterior request on their interface. We call them Autonomous Smart Contracts (ASCs),\nas they allow more autonomy and less dependency on external centralized services."),(0,r.kt)("p",null,"ASCs offer a plethora of use cases that leverage their self wake-up functionality.\nIn the realm of Decentralized Finance (DeFi), these contracts can automate liquidations,\nyield farming strategies, and portfolio rebalancing.\nSupply chain management benefits from autonomous contracts through automated inventory management and quality control processes.\nIn the insurance industry, claims settlements can be accelerated with instant payments and parametric insurance.\nGaming and NFT platforms can provide dynamic and interactive experiences with evolving NFTs and automated auctions.\nAdditionally, real estate transactions can be streamlined with escrow automation and simplified rental agreements.\nThese use cases exemplify the transformative potential of Autonomous Smart Contracts in enabling automated and efficient\nprocesses across various industries."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Learn more about Autonomous Smart Contracts ",(0,r.kt)("a",{parentName:"p",href:"/docs/learn/asc/intro"},"here"),".")),(0,r.kt)("h2",{id:"storage-costs"},"Storage costs"),(0,r.kt)("p",null,"In Massa, each network node maintains a full copy of the ledger. Having a massive ledger size (hundreds of terabytes), would pose high entry barriers for potential node runners. To ensure smooth operation and enable node hosting at home, it's essential to establish a reasonable size limit, and remove the need for excessive storage capacity. After careful consideration, we have determined that a storage size limit of 1TB strikes the right balance. This means that each participant can store data on the ledger until it reaches the 1TB threshold. By implementing this limit, we aim to promote widespread adoption and empower individuals to run nodes effortlessly. "),(0,r.kt)("p",null,"In order to enforce this limit, users are required to lock a corresponding amount of coins for each byte of storage they claim. This applies to various data elements such as your address, balance, keys in your datastore, bytecode, and more. By locking coins, you establish a commitment that ensures fair usage of storage resources. Once you release your allocated space in the storage, the locked coins are subsequently released as well. This mechanism guarantees a balanced and accountable approach to managing storage within the network."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Read more about storage costs ",(0,r.kt)("a",{parentName:"p",href:"/docs/learn/storage-costs"},"here"),".")),(0,r.kt)("h2",{id:"gas"},"Gas"),(0,r.kt)("p",null,"In Massa, there is no Gas price.\nEach operation declares a max amount of gas that it can use, and provides a fee that is added to the rewards of the block in which the operation is executed."),(0,r.kt)("p",null,"Block producers then choose which operations to include in their blocks to fit the max block gas and max block size constraints while maximizing the total fee."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Read more about gas ",(0,r.kt)("a",{parentName:"p",href:"/docs/learn/gas"},"here"),".")),(0,r.kt)("h2",{id:"block"},"Block"),(0,r.kt)("p",null,"A block is a data structure built by nodes and its function is to aggregate several operations. As explained above,\nfor each new slot that becomes active, a particular node in the network is elected in a deterministic way with the\ntask of creating the block that will be stored in that slot (more about this in the description of the Selector\nModule below). A block from a given thread can only contain operations originating from a creator_public_key whose\nhash\u2019s five first bits designate the corresponding thread, thus implicitly avoiding collisions in operations integrated into parallel threads. Block size is limited to 1 MB."),(0,r.kt)("p",null,"The content of a block is as follows:"),(0,r.kt)("table",null,(0,r.kt)("tr",null,(0,r.kt)("th",{colspan:"2"},"Block header")),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("code",null,"slot")),(0,r.kt)("td",null,"A description of the block slot, defined by a couple (period, thread) that uniquely identify it")),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("code",null,"creator_public_key")),(0,r.kt)("td",null,"The public key of the block creator (32 bytes)")),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("code",null,"parents")),(0,r.kt)("td",null,"A list of the 32 parents of the block, one parent per thread (parent blocks are identified by the block hash)")),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("code",null,"endorsements")),(0,r.kt)("td",null,"A list of the 16 endorsements for the block (more about endorsements below)")),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("code",null,"operations_hash")),(0,r.kt)("td",null,"A hash of all the operations included in the block (=hash of the block body below)")),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("code",null,"signature")),(0,r.kt)("td",null,"Signature of all the above with the private key of the block creator")),(0,r.kt)("tr",null,(0,r.kt)("th",{colspan:"2"},"Block body")),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("code",null,"operations")),(0,r.kt)("td",null,"The list of all operations included in the block"))),(0,r.kt)("h2",{id:"operation"},"Operation"),(0,r.kt)("p",null,"At its core, the Massa network revolves around the aggregation, sequencing, and execution of operations. Operations are\nrecorded inside blocks that are located in slots. "),(0,r.kt)("p",null,"Operations are denoted by a string prefixed with 'O' that encapsulate crucial information within a byte array.\nThe byte array encompasses the version in a u64 varint format, the Blake3 hash of the fully serialized content\nof the operation, and the public key of the creator.\nBy meticulously organizing and recording operations within blocks that reside in specific slots,\nthe Massa network ensures the integrity and efficiency of its operations."),(0,r.kt)("h3",{id:"operation-types"},"Operation types"),(0,r.kt)("p",null,"There are three types of operations: transactions, roll operations, and smart contract code execution.\nThe general structure of an operation is the following, and the different types of operations differ by their payload:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",colSpan:3,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Transaction Binary Representation"))),(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Field")),(0,r.kt)("th",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Description")),(0,r.kt)("th",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Type")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"creator_public_key"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"The public key of the operation creator")),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"32 bytes"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"expiration_period"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"Period after which the operation is expired")),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"u64 varint"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"fee"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"The amount of fees the creator is willing to pay")),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"u64 varint"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"type"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"The type of operation\n(from 0 to 4: transaction, rollbuy, rollsell, executesc,\ncallsc)")),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"u64 varint"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"payload"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"The content of the operation")),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"see each operation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"signature"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"Signature of all the above with the private key of the\noperation creator")),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"64 bytes"))))),(0,r.kt)("h4",{id:"transaction-operations"},"Transaction operations"),(0,r.kt)("p",null,"Transactions are operations that move native Massa coins between addresses. Here is the corresponding payload:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",colSpan:3,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Transaction Payload Binary Representation"))),(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Field")),(0,r.kt)("th",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Description")),(0,r.kt)("th",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Type")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"amount"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"The amount of coins to transfer")),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"u64 varint"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"destination_address"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"The address of the recipient")),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"32 bytes"))))),(0,r.kt)("h4",{id:"buysell-rolls-operations"},"Buy/Sell Rolls operations"),(0,r.kt)("p",null,"Rolls are staking tokens that participants can buy or sell with native Massa coins. By owning rolls,\naddresses can participate in block creation  ",(0,r.kt)("a",{parentName:"p",href:"/docs/node/stake"},"more about staking below"),".\nThis is done via special operations, with a simple payload:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",colSpan:3,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Buy/Sell Rolls Payload Binary Representation"))),(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Field")),(0,r.kt)("th",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Description")),(0,r.kt)("th",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Type")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"nb_of_rolls"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"The number of rolls to buy or sell")),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"u64 varint"))))),(0,r.kt)("h4",{id:"smart-contract-operations"},"Smart Contract operations"),(0,r.kt)("p",null,"Smart Contracts are pieces of code that can be run inside the Massa virtual machine. There are two ways\nof calling for the execution of code; by direct execution of bytecode, and by a smart-contract function call.\nFormer is done using the Execute SC operation, and latter with Call SC operation."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Execute SC operation"),(0,r.kt)("p",{parentName:"li"},"The ExecuteSC operation provides a powerful functionality within the Massa network by enabling the execution of smart contracts\ndirectly instead of storing them.\nInstead of storing the bytecode, the code itself is placed within the operation as a smart contract.\nWhen the ExecuteSC operation is executed, the blockchain triggers the execution of the main function within\nthe smart contract code. After the code is executed, the blockchain proceeds to other tasks while retaining\nand reflecting the changes made to the ledger and other relevant data.\nThis approach ensures that the executed changes are recorded and maintained on the ledger, rather than\nretaining the bytecode itself.\nBy executing smart contracts in this manner, the Massa network offers flexibility and efficiency\nin managing and executing code within its blockchain ecosystem."))),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",colSpan:3,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Execute SC Payload Binary Representation"))),(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Field")),(0,r.kt)("th",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Description")),(0,r.kt)("th",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Type")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"max_gas"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"The maximum gas spendable for this operation")),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"u64 varint"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"bytecode_len"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"The length of the bytecode field")),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"u64 varint"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"bytecode"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"The bytecode to run (in the context of the caller address)")),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"datastore_len"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"The number of the datastore keys (u64 varint), each record is then stored one after another")),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"u64 varint"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"list of datastore records")),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"Concatenation of ",(0,r.kt)("inlineCode",{parentName:"p"},"key_len")," (u8), ",(0,r.kt)("inlineCode",{parentName:"p"},"key"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"value_len")," (u64 varint), ",(0,r.kt)("inlineCode",{parentName:"p"},"value"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1})))),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"Call SC operation")),(0,r.kt)("p",null,"Here, the code is indirectly called via the call to an existing smart contract function, together with the required parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",colSpan:3,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Call SC Payload Binary Representation"))),(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Field")),(0,r.kt)("th",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Description")),(0,r.kt)("th",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Type")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"max_gas"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"The maximum gas spendable for this operation")),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"u64 varint"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"coins"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"The coins transferred in the call")),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"u64 varint"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"target_address"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"The address of the targeted smart contract")),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"32 bytes"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"function_name_length"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"The length of the name of the function that is called")),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"u8"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"function_name"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"The name of the function that is called")),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"utf8"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"param_len"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"The number of parameters of the function call")),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"u64 varint"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"params"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"The parameters of the function call")),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1})))),(0,r.kt)("h3",{id:"operation-lifecycle"},"Operation lifecycle"),(0,r.kt)("p",null,"Massa's maximal theoretical throughput is about 10k operations per second, with low hardware requirements for validators to improve decentralization.\nThis puts constraints on how operations are executed and finalized in Massa:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"parallelization techniques are required for processing operations fast enough"),(0,r.kt)("li",{parentName:"ul"},"nodes are unable to store the whole history of previously executed operations (for example to ensure that an old operation is not being re-executed)"),(0,r.kt)("li",{parentName:"ul"},"block producers do not have enough computing power to simulate the execution of all candidate operations to choose which ones to include in their blocks"),(0,r.kt)("li",{parentName:"ul"},"security must always be guaranteed against malicious actors")),(0,r.kt)("p",null,"Massa addresses these issues through multiple techniques."),(0,r.kt)("h4",{id:"operation-format-and-legality"},"Operation format and legality"),(0,r.kt)("p",null,"An operation is considered legal if it properly deserializes, its field values are legal and mutually consistent,\nand it passes signature verification."),(0,r.kt)("h5",{id:"operation-1"},"Operation"),(0,r.kt)("p",null,"Binary serialization format of an operation:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",colSpan:3,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Operation Binary Representation"))),(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Field")),(0,r.kt)("th",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Description")),(0,r.kt)("th",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Type")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"signature"))),(0,r.kt)("td",{parentName:"tr",colSpan:2,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"See ",(0,r.kt)("a",{parentName:"p",href:"#signature"},"Signature section")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"sender public key"))),(0,r.kt)("td",{parentName:"tr",colSpan:2,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"See ",(0,r.kt)("a",{parentName:"p",href:"#public-key"},"Public Key section")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"serialized operation contents"))),(0,r.kt)("td",{parentName:"tr",colSpan:2,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"See ",(0,r.kt)("a",{parentName:"p",href:"#operation-contents"},"Operation Contents section")))))),(0,r.kt)("p",null,"Legality checks performed on deserialization:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the signature is legal (see ",(0,r.kt)("a",{parentName:"li",href:"#signature"},"Signature section"),")"),(0,r.kt)("li",{parentName:"ul"},"the public key is legal (see ",(0,r.kt)("a",{parentName:"li",href:"#public-key"},"Public Key section"),")"),(0,r.kt)("li",{parentName:"ul"},"the serialized operation contents are legal (see ",(0,r.kt)("a",{parentName:"li",href:"#operation-contents"},"Operation Contents section"),")")),(0,r.kt)("h5",{id:"operation-contents-hash"},"Operation contents hash"),(0,r.kt)("p",null,"The operation contents hash is computed as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"operation_contents_hash = blake3_hash(concatenate(serialize_binary(public_key), serialize_binary(operation_contents)))\n")),(0,r.kt)("p",null,"Blake3 is 12 times faster than sha256 and is not subject to ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Length_extension_attack"},"length extension attacks")," contrary to sha256.\nSee the ",(0,r.kt)("a",{parentName:"p",href:"#public-key"},"Public Key section")," and ",(0,r.kt)("a",{parentName:"p",href:"#operation-contents"},"Operation Contents")," sections for details on the binary serialization formats of these fields. "),(0,r.kt)("p",null,"This hash is a deterministic fingerprint of the non-malleable parts of the operation (excluding the signature) that can be considered unique in practice."),(0,r.kt)("p",null,"Because the operation contents hash uniquely identifies an operation,\nif another operation containing the same values in its operation contents is created,\nboth operations will be considered to be the same operation that can only be executed at most a single time. (TODO see execution section)\nIn Massa, there is no Nounce in operations.\nResolving potential conflicts can be done adjusting the expiry period of the operation being created.   "),(0,r.kt)("h5",{id:"operation-id"},"Operation ID"),(0,r.kt)("p",null,"The ID of an operation has the following binary representation:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",colSpan:3,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Operation ID Binary Representation"))),(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Field")),(0,r.kt)("th",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Description")),(0,r.kt)("th",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Type")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"version number"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"Varint unsigned 64-bit integer using protobuf conventions.\nIndicates the operation's version.")),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"between 1 and 9 bytes (inclusive)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"operation_contents_hash"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"See ",(0,r.kt)("a",{parentName:"p",href:"#operation-contents-hash"},"Operation contents hash section"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"32 bytes"))))),(0,r.kt)("p",null,"Legality checks performed on binary deserialization:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the version number must be 0"),(0,r.kt)("li",{parentName:"ul"},"the operation contents hash must be legal (see ",(0,r.kt)("a",{parentName:"li",href:"#operation-contents-hash"},"Operation contents hash section"),")")),(0,r.kt)("p",null,"The ID of an operation has the following UTF-8 ASCII-compatible text representation:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",colSpan:3,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Operation ID Text Representation"))),(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Field")),(0,r.kt)("th",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Description")),(0,r.kt)("th",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Type")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"prefix letter 'O'"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"Not a zero but the letter O.\nA constant prefix indicating that it is an operation ID\nto avoid ambiguity with other IDs (e.g., Block IDs are prefixed with 'B')")),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"1 letter (1 byte)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"operation ID contents"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"Base58check (no version, with checksum) representation of the binary serialization of the operation ID (see above)")),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"18 to 62 characters (18 to 62 byt"))))),(0,r.kt)("p",null,"Note that the base58check encoding is the same one as the one used by bitcoin but without version number as it is already included in the underlying binary serialization of the operation ID."),(0,r.kt)("p",null,"Here is the entire encoding process for an operation ID in text format:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"serialize the operation ID in binary format (see above)"),(0,r.kt)("li",{parentName:"ul"},"compute the SHA256 hash of the binary serialization"),(0,r.kt)("li",{parentName:"ul"},"append the first 4 bytes of the sha256 hash at the end of the binary serialization of the ID. This is used as a checksum to detect typing errors as operation IDs are also meant to be written on paper by humans."),(0,r.kt)("li",{parentName:"ul"},"encode the resulting byte array using the base alphabet ",(0,r.kt)("inlineCode",{parentName:"li"},"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"),". Similar looking characters (eg 0 vs O) are excluded to avoid human confusion."),(0,r.kt)("li",{parentName:"ul"},"prepend the letter 'O'")),(0,r.kt)("p",null,"Legality checks performed on text deserialization:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the text must be valid UTF-8 and ASCCII with only alphanumeric characters"),(0,r.kt)("li",{parentName:"ul"},"the prefix letter must be 'O'"),(0,r.kt)("li",{parentName:"ul"},"the base58check must use the legal alphabet described above and the checksum must verify"),(0,r.kt)("li",{parentName:"ul"},"the decoded binary serialization of the operation ID must be legal (see above)")),(0,r.kt)("p",null,"Example of legal operation ID: ",(0,r.kt)("inlineCode",{parentName:"p"},"O19DQAos5Dw6z4BVzQPYxj9g8v6H5W3HuKV7dFuYEpc2YNWopEz")),(0,r.kt)("p",null,"To maximize performance by having the same hash re-used for signature and ID computation,\nthe ID uses the ",(0,r.kt)("inlineCode",{parentName:"p"},"operation_contents_hash")," which does not include the signature in the hashing process.\nThis has the consequence of enabling malleability on operation signatures, which is explicitly tolerated by Massa."),(0,r.kt)("h5",{id:"signature"},"Signature"),(0,r.kt)("p",null,"The signature of an operation is computed in the following way:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"ed25519_sign(operation_contents_hash)\n")),(0,r.kt)("p",null,"Signature verification is a CPU time-intensive process and is done in a deferred, parallelized and batched fashion.\nThe following function is used for signature verification: ",(0,r.kt)("a",{parentName:"p",href:"https://docs.rs/ed25519-dalek/2.0.0/ed25519_dalek/fn.verify_batch.html"},"https://docs.rs/ed25519-dalek/2.0.0/ed25519_dalek/fn.verify_batch.html")),(0,r.kt)("p",null,"For maximal robustness and future-proofing, Massa tolerates operation signature malleability."),(0,r.kt)("p",null,"Binary serialization format of the signature:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",colSpan:3,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Signature Binary Representation"))),(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Field")),(0,r.kt)("th",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Description")),(0,r.kt)("th",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Type")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"version number"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"Varint unsigned 64-bit integer using protobuf conventions")),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"Between 1 (included) and 9 (included) bytes"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"signature content"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"Constant-size ed25519 signature made of the concatenation of its R (32-bit) and s (32-bit) components")),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"64 bytes"))))),(0,r.kt)("p",null,"Legality checks performed on deserialization:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the version number must be 0"),(0,r.kt)("li",{parentName:"ul"},"the signature must be 64 bytes long")),(0,r.kt)("p",null,"Signature verification with respect to data and public key is not performed on signature deserialization.\nInvalid field elements in the signature are not checked on signature deserialization but on signature verification."),(0,r.kt)("h5",{id:"secret-key"},"Secret key"),(0,r.kt)("p",null,"The secret key has the following binary representation:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",colSpan:3,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Secret Key Binary Representation"))),(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Field")),(0,r.kt)("th",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Description")),(0,r.kt)("th",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Type")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"version number"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"Varint unsigned 64-bit integer using protobuf conventions. Indicates the secret key version.")),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"Between 1 (included) and 9 (included) bytes"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"cryptographic secret key"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"ed25519 secret key bytes")),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"32 bytes"))))),(0,r.kt)("p",null,"Legality checks performed on binary deserialization:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the version number must be 0"),(0,r.kt)("li",{parentName:"ul"},"the cryptographic secret key bytes must be 32 bytes long ")),(0,r.kt)("p",null,"Secret keys have the following UTF-8 ASCII-compatible text representation:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",colSpan:3,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Secret Key Text Representation"))),(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Field")),(0,r.kt)("th",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Description")),(0,r.kt)("th",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Type")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"prefix letter 'S'"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"A constant prefix indicating that it is a secret key to avoid ambiguity with other IDs\n(e.g., Block IDs are prefixed with 'B')")),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"1 letter (1 byte)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"secret key contents"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"Base58check (no version, with checksum) representation of the binary serialization of the secret key\n(see above)")),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"18 (included) to 62 (included) characters\n(18 to 62 bytes)"))))),(0,r.kt)("p",null,"Note that the base58check encoding is the same one as the one used by bitcoin but without version number as it is already included in the underlying binary serialization of the secret key."),(0,r.kt)("p",null,"Here is the entire encoding process for a secret key in text format:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"serialize the secret key in binary format (see above)"),(0,r.kt)("li",{parentName:"ul"},"compute the SHA256 hash of the binary serialization"),(0,r.kt)("li",{parentName:"ul"},"append the first 4 bytes of the sha256 hash at the end of the binary serialization of the key. This is used as a checksum to detect typing errors as secret keys are also meant to be written on paper by humans."),(0,r.kt)("li",{parentName:"ul"},"encode the resulting byte array using the base alphabet ",(0,r.kt)("inlineCode",{parentName:"li"},"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"),". Similar looking characters (eg 0 vs O) are excluded to avoid human confusion."),(0,r.kt)("li",{parentName:"ul"},"prepend the letter 'S'")),(0,r.kt)("p",null,"Legality checks performed on text deserialization:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the text must be valid UTF-8 and ASCCII with only alphanumeric characters"),(0,r.kt)("li",{parentName:"ul"},"the prefix letter must be 'S'"),(0,r.kt)("li",{parentName:"ul"},"the base58check must use the legal alphabet described above and the checksum must verify"),(0,r.kt)("li",{parentName:"ul"},"the decoded binary serialization of the secret key must be legal (see above)")),(0,r.kt)("p",null,"Example of legal secret key: ",(0,r.kt)("inlineCode",{parentName:"p"},"S1CkpvD4WMjJWxR2WZcrDEkJ1kWG2kKe1e3Afe8miqmskHqovvA")),(0,r.kt)("h5",{id:"public-key"},"Public key"),(0,r.kt)("p",null,"Binary serialization format of the public key:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",colSpan:3,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Public Key Binary Representation"))),(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Field")),(0,r.kt)("th",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Description")),(0,r.kt)("th",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Type")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"version number"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"Varint unsigned 64-bit integer using protobuf conventions")),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"Between 1 (included) and 9 (included) bytes"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"cryptographic public key"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"Compressed ed25519 public key")),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"32 bytes"))))),(0,r.kt)("p",null,"The cryptographic public key is compressed in the following way to take only 32 bytes instead of 64:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the first 255 bits represent the ",(0,r.kt)("inlineCode",{parentName:"li"},"y")," coordinate"),(0,r.kt)("li",{parentName:"ul"},"the high bit of the 32nd byte gives the sign of ",(0,r.kt)("inlineCode",{parentName:"li"},"x"),"\nUsing this data, and through symetries in the ed25519 curve, it is possible to deduce the ",(0,r.kt)("inlineCode",{parentName:"li"},"x")," coordinate.\nIn Massa, public key decompression is performed on public key deserialization,\nand because decompression is a CPU time-heavy operation,\neach connected peer has a dedicated CPU thread performing its deserializations.")),(0,r.kt)("p",null,"Legality checks performed on deserialization:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the version number must be 0"),(0,r.kt)("li",{parentName:"ul"},"the cryptographic public key must be 32 bytes long"),(0,r.kt)("li",{parentName:"ul"},"the compressed public key ",(0,r.kt)("inlineCode",{parentName:"li"},"y")," component must be valid for the ed25519 curve")),(0,r.kt)("p",null,"Public keys have the following UTF-8 ASCII-compatible text representation:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",colSpan:3,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Public Key Text Representation"))),(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Field")),(0,r.kt)("th",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Description")),(0,r.kt)("th",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Type")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"prefix letter 'P'"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"A constant prefix indicating that it is a secret key to avoid ambiguity with other IDs\n(e.g., Block IDs are prefixed with 'B')")),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"1 letter (1 byte)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"public key contents"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"Base58check (no version, with checksum) representation of the binary serialization of the public key.\nSee above.")),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"18 (included) to 62 (included) characters.\n18 to 62 bytes"))))),(0,r.kt)("p",null,"Note that the base58check encoding is the same one as the one used by bitcoin but without version number as it is already included in the underlying binary serialization of the public key."),(0,r.kt)("p",null,"Here is the entire encoding process for a public key in text format:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"serialize the public key in binary format (see above)"),(0,r.kt)("li",{parentName:"ul"},"compute the SHA256 hash of the binary serialization"),(0,r.kt)("li",{parentName:"ul"},"append the first 4 bytes of the sha256 hash at the end of the binary serialization of the key. This is used as a checksum to detect typing errors as public keys are also meant to be written on paper by humans."),(0,r.kt)("li",{parentName:"ul"},"encode the resulting byte array using the base alphabet ",(0,r.kt)("inlineCode",{parentName:"li"},"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"),". Similar looking characters (eg 0 vs O) are excluded to avoid human confusion."),(0,r.kt)("li",{parentName:"ul"},"prepend the letter 'P'")),(0,r.kt)("p",null,"Legality checks performed on text deserialization:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the text must be valid UTF-8 and ASCCII with only alphanumeric characters"),(0,r.kt)("li",{parentName:"ul"},"the prefix letter must be 'P'"),(0,r.kt)("li",{parentName:"ul"},"the base58check must use the legal alphabet described above and the checksum must verify"),(0,r.kt)("li",{parentName:"ul"},"the decoded binary serialization of the public key must be legal (see above)")),(0,r.kt)("p",null,"Example of legal public key: ",(0,r.kt)("inlineCode",{parentName:"p"},"P1t4JZwHhWNLt4xYabCbukyVNxSbhYPdF6wCYuRmDuHD784juxd")),(0,r.kt)("h5",{id:"address-1"},"Address"),(0,r.kt)("p",null,"Addresses can be of two categories in Massa:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Externally Owned Account addresses are used to identify users that hold a private key and can sign operations"),(0,r.kt)("li",{parentName:"ul"},"Smart Contract Account addresses are used to identify smart contracts that are not linked to any private key")),(0,r.kt)("p",null,"Binary serialization format of an address:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",colSpan:3,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Address Binary Representation"))),(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Field")),(0,r.kt)("th",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Description")),(0,r.kt)("th",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Type")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"address category"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"Varint unsigned 64-bit integer using protobuf conventions:"),(0,r.kt)("ul",{parentName:"td"},(0,r.kt)("li",{parentName:"ul"},"value 0 for externally owned accounts,"),(0,r.kt)("li",{parentName:"ul"},"value 1 for smart contracts"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"Between 1 (included) and 9 (included) bytes"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"version number"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"Varint unsigned 64-bit integer using protobuf conventions")),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"Between 1 (included) and 9 (included) bytes"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"underlying hash"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"Underlying blake3 hash")),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"32 bytes"))))),(0,r.kt)("p",null,"The underlying hash of an externally owned account address is computed by taking the blake3 hash\nof the binary serialization of the account's public key (see ",(0,r.kt)("a",{parentName:"p",href:"#public-key"},"Public Key section"),").\nThe Blockclique sharding thread of an externally owned account address is computed\nby taking the first 5 bits of its underlying hash."),(0,r.kt)("p",null,"The underlying hash of a smart contract account address is computed\nby taking the blake3 hash of a deterministic seed.\nBecause this seed can be rewritten by Blockclique changes,\nalways wait for finality before using the address of a newly created smart contract."),(0,r.kt)("p",null,"Legality checks performed on binary deserialization:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the address category must be 0 or 1"),(0,r.kt)("li",{parentName:"ul"},"the version number must be 0"),(0,r.kt)("li",{parentName:"ul"},"the underlying hash must be 32 bytes long")),(0,r.kt)("p",null,"Text serialization of an address:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",colSpan:3,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Address Text Representation"))),(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Field")),(0,r.kt)("th",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Description")),(0,r.kt)("th",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Type")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"prefix letter 'A'"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"A constant prefix indicating that it is an address to avoid ambiguity with other IDs.\n(e.g., Block IDs are prefixed with 'B')")),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"1 letter (1 byte)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"address contents"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"Base58check (no version, with checksum) representation of the binary serialization of the address.\nSee above.")),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"18 (included) to 74 (included) characters\n18 to 74 bytes"))))),(0,r.kt)("p",null,"Here is the entire encoding process for an address in text format:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"serialize the address in binary format (see above)"),(0,r.kt)("li",{parentName:"ul"},"compute the SHA256 hash of the binary serialization"),(0,r.kt)("li",{parentName:"ul"},"append the first 4 bytes of the sha256 hash at the end of the binary serialization of the address. This is used as a checksum to detect typing errors as addresses are also meant to be written on paper by humans."),(0,r.kt)("li",{parentName:"ul"},"encode the resulting byte array using the base alphabet ",(0,r.kt)("inlineCode",{parentName:"li"},"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"),". Similar looking characters (eg 0 vs O) are excluded to avoid human confusion."),(0,r.kt)("li",{parentName:"ul"},"prepend the letter 'A'")),(0,r.kt)("p",null,"Legality checks performed on text deserialization:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the text must be valid UTF-8 and ASCCII with only alphanumeric characters"),(0,r.kt)("li",{parentName:"ul"},"the prefix letter must be 'A'"),(0,r.kt)("li",{parentName:"ul"},"the base58check must use the legal alphabet described above and the checksum must verify"),(0,r.kt)("li",{parentName:"ul"},"the decoded binary serialization of the address must be legal (see above)")),(0,r.kt)("p",null,"Example of legal address in text format: ",(0,r.kt)("inlineCode",{parentName:"p"},"AU12v83xmHg2UrLM8GLsXRMrm7LQgn3DZVT6kUeFsuFyhZKLkbQtY")),(0,r.kt)("h5",{id:"coin-amounts"},"Coin amounts"),(0,r.kt)("p",null,"Coin amounts represent a quantity of Massa native coins and are positive or zero, fixed-point numbers.\nThe fixed point precision is ",(0,r.kt)("inlineCode",{parentName:"p"},"1e-9"),".\nThe minimal coin amount that can be represented is is ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),"\nand the maximal coin amount that can be represented is ",(0,r.kt)("inlineCode",{parentName:"p"},"18,446,744,073.709551615"),".\nFloating point numbers should never be used for amount computations to avoid determinism problems and rounding errors."),(0,r.kt)("p",null,"Binary serialization format of a coin amount:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",colSpan:3,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Coin Amount Binary Representation"))),(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Field")),(0,r.kt)("th",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Description")),(0,r.kt)("th",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Type")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"mantissa"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"Varint unsigned 64-bit integer using protobuf conventions.\nThe mantissa is deduced by multiplying the represented coin amount by ",(0,r.kt)("inlineCode",{parentName:"p"},"1e9"),".")),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"From 1 byte (included) to\n9 bytes (included)"))))),(0,r.kt)("p",null,"No checks are performed on deserialization except the validity of the varint itself\nand that its value fits in an unsigned 64bit integer."),(0,r.kt)("p",null,"In text representation, coin amounts are represented as a traditional decimal number utf-8 string without zero padding and with the ",(0,r.kt)("inlineCode",{parentName:"p"},".")," decimal separator."),(0,r.kt)("p",null,"Here are some examples of valid coin amounts in text format:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"123456.789012345")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"0.001")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"0"))),(0,r.kt)("p",null,"On text format deserialization, the following legality checks are performed:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the string is valid UTF-8"),(0,r.kt)("li",{parentName:"ul"},"there is at least one character"),(0,r.kt)("li",{parentName:"ul"},"only alphanumeric characters and the ",(0,r.kt)("inlineCode",{parentName:"li"},".")," decimal separator are allowed"),(0,r.kt)("li",{parentName:"ul"},"the ",(0,r.kt)("inlineCode",{parentName:"li"},".")," decimal separator must appear zero or one time"),(0,r.kt)("li",{parentName:"ul"},"the ",(0,r.kt)("inlineCode",{parentName:"li"},".")," decimal separator must not be the first nor the last character"),(0,r.kt)("li",{parentName:"ul"},"deserialization does not under/over-flow the allowed coin amount range"),(0,r.kt)("li",{parentName:"ul"},"deserialization into the underlying unsigned 64 bit representation does not cause precision loss (no rounding or truncation allowed) ")),(0,r.kt)("h5",{id:"operation-contents"},"Operation contents"),(0,r.kt)("p",null,"Operation contents are represented with a common set of properties (",(0,r.kt)("inlineCode",{parentName:"p"},"fee"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"expire_period"),") and a specific payload\ndepending on the operation type among:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Transaction")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"CallSC")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ExecuteSC")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"RollBuy")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"RollSell"))),(0,r.kt)("p",null,"Binary serialization format of operation contents:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",colSpan:3,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Operation Contents Binary Representation"))),(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Field")),(0,r.kt)("th",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Description")),(0,r.kt)("th",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Type")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"fee"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"Coin amount in binary format (see ",(0,r.kt)("a",{parentName:"p",href:"#coin-amounts"},"Coin amount section"),")")),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"From 1 byte (included) to\n9 bytes (included)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"expire_period"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"Varint unsigned 64-bit integer using protobuf conventions.")),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"From 1 byte (included) to\n9 bytes (included)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"type identifier"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"Varint unsigned 32-bit integer using protobuf conventions.")),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"From 1 byte (included) to\n5 bytes (included)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"op"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"Binary-serialized operation payload (see below).")),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"Size varies"))))),(0,r.kt)("p",null,"The type identifier indicates the payload type:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Transaction = 0")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"RollBuy = 1")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"RollSell = 2")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ExecuteSC = 3")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"CallSC = 4"))),(0,r.kt)("p",null,"Legality checks performed on deserialization:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the fee must be legal (see ",(0,r.kt)("a",{parentName:"li",href:"#coin-amounts"},"Coin amount section"),")"),(0,r.kt)("li",{parentName:"ul"},"the type identifier must be one of the ones listed above"),(0,r.kt)("li",{parentName:"ul"},"the operation payload defined by the type identifier must be legal (see below)")),(0,r.kt)("h6",{id:"transaction-operation-payload"},"Transaction operation payload"),(0,r.kt)("p",null,"The binary serialization format of the payload of a transaction operation follows:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",colSpan:3,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Transaction Operation Payload Binary Representation"))),(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Field")),(0,r.kt)("th",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Description")),(0,r.kt)("th",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Type")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"destination address"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"Transfer destination address binary representation, see ",(0,r.kt)("a",{parentName:"p",href:"#address"},"Address section"),".")),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"From 34 (included) to\n50 bytes (included)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"amount"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"Coin amount binary representation, see ",(0,r.kt)("a",{parentName:"p",href:"#coin-amounts"},"Coin amount section"),".")),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"From 1 (included) to\n9 bytes (included)"))))),(0,r.kt)("p",null,"Legality checks performed on deserialization:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the destination address must be legal (see ",(0,r.kt)("a",{parentName:"li",href:"#address"},"Address section"),")"),(0,r.kt)("li",{parentName:"ul"},"the amount must be legal (see ",(0,r.kt)("a",{parentName:"li",href:"#coin-amounts"},"Coin amount section"),")")),(0,r.kt)("h6",{id:"rollbuy-operation-payload"},"RollBuy operation payload"),(0,r.kt)("p",null,"The binary serialization format of the payload of a roll buy operation follows:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",colSpan:3,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Payload of a Roll Buy Operation Binary Representation"))),(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Field")),(0,r.kt)("th",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Description")),(0,r.kt)("th",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Type")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"rolls"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"Varint unsigned 64-bit integer using protobuf conventions.")),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"From 1 byte (included) to\n9 bytes (included)"))))),(0,r.kt)("p",null,"No particular checks performed at deserialization except that the varint must be valid\nand fit in an unsigned 64bit integer."),(0,r.kt)("h6",{id:"rollsell-operation-payload"},"RollSell operation payload"),(0,r.kt)("p",null,"The binary serialization format of the payload of a roll sell operation follows:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",colSpan:3,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Payload of a Roll Buy Operation Binary Representation"))),(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Field")),(0,r.kt)("th",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Description")),(0,r.kt)("th",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Type")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"rolls"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"Varint unsigned 64-bit integer using protobuf conventions.")),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"From 1 byte (included) to\n9 bytes (included)"))))),(0,r.kt)("p",null,"No particular checks performed at deserialization except that the varint must be valid\nand fit in an unsigned 64bit integer."),(0,r.kt)("h6",{id:"executesc-operation-payload"},"ExecuteSC operation payload"),(0,r.kt)("p",null,"The binary serialization format of the payload of a an Execute SC operation follows:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",colSpan:3,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Payload of a ExecuteSC Operation Binary Representation"))),(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Field")),(0,r.kt)("th",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Description")),(0,r.kt)("th",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Type")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"max_gas"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"Varint unsigned 64-bit integer using protobuf conventions.")),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"From 1 byte (included) to\n9 bytes (included)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"max_coins"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"Coin amount binary serialization (see ",(0,r.kt)("a",{parentName:"p",href:"#coin-amounts"},"Coin amount section"),").")),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"From 1 byte (included) to\n9 bytes (included)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"bytecode_length"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"Varint unsigned 64-bit integer using protobuf conventions.")),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"From 1 byte (included) to\n9 bytes (included)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"bytecode"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"Raw bytes of bytecode to execute.")),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"From 0 to 10,000,000 bytes"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"operation_datastore_length"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"Varint unsigned 64-bit integer using protobuf conventions.")),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"From 1 byte (included) to\n9 bytes (included)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"operation_datastore_items"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"Concatenated datastore items.")),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"See below."))))),(0,r.kt)("p",null,"Datastore item binary format:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",colSpan:3,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Datastore Item Binary Representation"))),(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Field")),(0,r.kt)("th",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Description")),(0,r.kt)("th",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Type")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"key length"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"Varint unsigned 64-bit integer using protobuf conventions.")),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"From 1 byte (included) to\n9 bytes (included)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"key"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"Raw key byte array.")),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"From 0 byte (included) to\n255 bytes (included)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"value length"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"Varint unsigned 64-bit integer using protobuf conventions.")),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"From 1 byte (included) to\n9 bytes (included)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"value"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"Raw value byte array.")),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"From 0 byte (included) to\n10,000,000 bytes (included)"))))),(0,r.kt)("p",null,"Legality checks performed at binary deserialization:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"bytecode length is inferior or equal to 10,000,000"),(0,r.kt)("li",{parentName:"ul"},"datastore length is inferior or equal to 128"),(0,r.kt)("li",{parentName:"ul"},"all datastore key lengths are inferior or equal to 255"),(0,r.kt)("li",{parentName:"ul"},"all datastore value lengths are inferior or equal to 10,000,000")),(0,r.kt)("h6",{id:"callsc-operation-payload"},"CallSC operation payload"),(0,r.kt)("p",null,"The binary serialization format of the payload of a an Call SC operation follows:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",colSpan:3,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Payload of a Call SC Operation"))),(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Field")),(0,r.kt)("th",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Description")),(0,r.kt)("th",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"th"},"Type")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"max_gas"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"Varint unsigned 64-bit integer using protobuf conventions.")),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"From 1 byte (included) to 9 bytes (included)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"coins"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"Coin amount binary serialization (see ",(0,r.kt)("a",{parentName:"p",href:"#coin-amounts"},"Coin amount section"),").")),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"From 1 byte (included) to 9 bytes (included)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"target_address"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"Target address binary representation, see ",(0,r.kt)("a",{parentName:"p",href:"#address"},"Address section"),".")),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"From 34 bytes (included) to 50 bytes (included)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"function_name_length"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"Varint unsigned 16-bit integer using protobuf conventions.")),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"From 1 byte (included) to 3 bytes (included)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"function_name"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"Name of the function to call encoded as UTF-8 string without null termination.")),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"From 0 bytes (included) to 65535 bytes (included)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"param_length"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"Varint unsigned 64-bit integer using protobuf conventions.")),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"From 1 byte (included) to 9 bytes (included)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"p"},"param"))),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"Raw bytes to pass as argument to the called function.")),(0,r.kt)("td",{parentName:"tr",colSpan:1,rowSpan:1},(0,r.kt)("p",{parentName:"td"},"From 0 byte (included) to 10,000,000 bytes (included)"))))),(0,r.kt)("p",null,"Legality checks performed at binary deserialization:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"coins must be a legal coin amount (see ",(0,r.kt)("a",{parentName:"li",href:"#coin-amounts"},"Coin amount section"),")"),(0,r.kt)("li",{parentName:"ul"},"target address must be a legal address (see ",(0,r.kt)("a",{parentName:"li",href:"#address"},"Address section"),")"),(0,r.kt)("li",{parentName:"ul"},"function name length must be inferior or equal to 65535"),(0,r.kt)("li",{parentName:"ul"},"function name must be valid UTF-8"),(0,r.kt)("li",{parentName:"ul"},"param length must be inferior or equal to 10,000,000")),(0,r.kt)("h5",{id:"example-of-legal-operation-with-valid-signature"},"Example of legal operation with valid signature"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Sender Secret key in text format: ",(0,r.kt)("inlineCode",{parentName:"li"},"S1CkpvD4WMjJWxR2WZcrDEkJ1kWG2kKe1e3Afe8miqmskHqovvA")),(0,r.kt)("li",{parentName:"ul"},"Sender Public key in text format: ",(0,r.kt)("inlineCode",{parentName:"li"},"P1t4JZwHhWNLt4xYabCbukyVNxSbhYPdF6wCYuRmDuHD784juxd")),(0,r.kt)("li",{parentName:"ul"},"Sender Address in text format: ",(0,r.kt)("inlineCode",{parentName:"li"},"AU12m1gXHUGxBZsDF4veeWfYaRmpztBCieHhPBaqf3fcRF2LdAuZ7")),(0,r.kt)("li",{parentName:"ul"},"Operation fee: ",(0,r.kt)("inlineCode",{parentName:"li"},"0.001")),(0,r.kt)("li",{parentName:"ul"},"Operation expiry period: ",(0,r.kt)("inlineCode",{parentName:"li"},"1000")),(0,r.kt)("li",{parentName:"ul"},"Operation type: ",(0,r.kt)("inlineCode",{parentName:"li"},"Transaction")),(0,r.kt)("li",{parentName:"ul"},"Transaction operation payload:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Destination address in text format: ",(0,r.kt)("inlineCode",{parentName:"li"},"AU12v83xmHg2UrLM8GLsXRMrm7LQgn3DZVT6kUeFsuFyhZKLkbQtY")),(0,r.kt)("li",{parentName:"ul"},"Amount: ",(0,r.kt)("inlineCode",{parentName:"li"},"3.1"))))),(0,r.kt)("p",null,"Resulting operation ID in text format: ",(0,r.kt)("inlineCode",{parentName:"p"},"O1Vy2P4tTEPxkNXpbUPVFemzp18FkTTmsJ2U6hPoyTvJ4nZMvBs")),(0,r.kt)("p",null,"Raw bytes in hexadecimal representation of the binary serialization of the operation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"00 36 B7 20 2A 12 DE DC 0E C1 F3 19 92 7F 17 87 E7 10 83 E0 58 63 8B CD 75 15 2F 3F 92\n0F 23 21 AE B4 C4 9B 87 87 4E 97 9F 95 28 77 0D D6 EB 65 18 36 0E 1C C1 84 DE A8 A0 57\n5A 1C 15 30 41 32 01 00 73 EE 58 D3 51 9D 54 03 E9 8F EF 60 35 4C DE 6C 7D A1 73 C1 6C\n8C 6C 58 CF C8 6E E5 21 51 3C A6 C0 84 3D E8 07 00 00 00 FC 50 AB 9B 1B 78 4A B1 93 0E\n5C F3 84 3E 8A E6 7C 59 42 1B 01 55 10 82 B0 25 90 91 4B 4C 2A 0A 80 FE 98 C6 0B\n")),(0,r.kt)("h4",{id:"operation-propagation"},"Operation propagation"),(0,r.kt)("p",null,"To reduce network usage and achieve high throughput while maintaining decentralization and security,\noperations are propagated using optimized gossip algorithms."),(0,r.kt)("h5",{id:"operation-submission"},"Operation submission"),(0,r.kt)("p",null,"When the API of a peer is called to submit an operation:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the operation is checked for legality (TODO redirect to legality section)",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"if the operation is not legal, it is rejected and an error message is returned by the API"))),(0,r.kt)("li",{parentName:"ul"},"the operation is added to the peer's operation pool (TODO redirect to pool and inclusion section)"),(0,r.kt)("li",{parentName:"ul"},"the operation is submitted to a broadcasting thread (TODO redirect to broadcasting section)")),(0,r.kt)("h5",{id:"operation-broadcasting"},"Operation broadcasting"),(0,r.kt)("p",null,"The broadcasting thread keeps sumbitted operations in memory for at least 32 seconds with a cap of 32000 operations being propagated at the same time.\nIt also keeps LRU caches of operations already processed by the current peer, and by other peers it is connected to."),(0,r.kt)("p",null,"When an operation is submitted to the broadcasting thread, it is first checked for expiry (expired operations are dropped),\nand ignored if it is already being propagated. "),(0,r.kt)("p",null,"The broadcasting thread announces the operation IDs of the operations being broadcast to connected peers with batching.\nOnly operation IDs not already known by a given peer are announced to it.\nThe announcement batches are made of operation IDs truncated down to 17 bytes to save bandwidth usage."),(0,r.kt)("p",null,"When a peer receives a batch of operation announcements,\nit ignores all the operation IDs that it already knows about and submits the remaining ones to the retrieval thread.\nThe remote peer announcing operations is marked as knowing about these operation IDs in the current peer's caches."),(0,r.kt)("h5",{id:"operation-retrieval"},"Operation retrieval"),(0,r.kt)("p",null,"The retrieval thread uses an optimized queue-based algorithm to ask connected peers for batches of operations given their IDs.\nRemote peers that are known to be aware of a given operation ID are prioritized over other peers.\nTimeouts are applied as well to re-attempt retrieval from other peers in case of failure."),(0,r.kt)("p",null,"When a batch of full operations is received:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the sender peer is marked as knowing about these operations in the current peer's caches."),(0,r.kt)("li",{parentName:"ul"},"the operations are checked for legality with batched parallel signature verification (TODO redirect to legality section)",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"if any of the operations is not legal, the batch is dropped, and the sender peer is bannned"))),(0,r.kt)("li",{parentName:"ul"},"the operations are added to the peer's operation pool (TODO redirect to pool and inclusion section)"),(0,r.kt)("li",{parentName:"ul"},"the operations are submitted to the broadcasting thread")),(0,r.kt)("h5",{id:"operation-propagation-within-blocks"},"Operation propagation within blocks"),(0,r.kt)("p",null,"Blocks contain arbtirary operations chosen by the block producer.\nBlock retrieval in Massa makes use of the propagation caches to only ask for operations that are not already known by the current peer.\nThis effectively avoids re-doing operation propagation and legality checks for block operations that have already propagated by themselves previously."),(0,r.kt)("p",null,"When a block is received, if any of the following happen the block is rejected (and its senders are banned):"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"any included operation is not legal (TODO redirect to legality section)"),(0,r.kt)("li",{parentName:"ul"},"the batched parallel signature verification of all the block operations is not a success"),(0,r.kt)("li",{parentName:"ul"},"the block operations root hash does not match the one in the header"),(0,r.kt)("li",{parentName:"ul"},"the cumulated size of all the operations in the block is strictly above 1MB")),(0,r.kt)("p",null,"This detects non-legal blocks early and prevents them from propagating in the network."),(0,r.kt)("h4",{id:"operation-execution"},"Operation execution"),(0,r.kt)("p",null,"When the consensus algorithm outputs the list of slots to execute,\nthat list is fed to the Execution thread that executes slots asynhronously, in time order."),(0,r.kt)("p",null,"The execution thread executes slots in order following two cursors: a candidate cursor and a final cursor."),(0,r.kt)("p",null,"The candidate cursor attempts to execute all slots up to 2 seconds in the past.\nIf a blockclique change happens, the candidate cursor is rolled back to the earliest slot that changed,\nand re-executes all the slots from there.\nThis means that the execution state and outcomes of an operation executed in a non-final slot can change at any time.\nThe 2 second latency serves the purpose of avoiding constant re-execution of the very volatile latest slots\nin order to save resources.\nThis means that the candidate execution state of an operation can be observed after two seconds (or more)\nfollowing the propagation of the block in which it was included.\nOverall, the deeper the slot is in the past, the exponentially more stable its candidate execution state is,\nup to finality after which it is guaranteed not to change anymore. "),(0,r.kt)("p",null,"The final cursor attempts to execute all final slots up to the latest one.\nFinal execution is prioritary over candidate execution:\nas long as there are slots to finalize, they are processed before candidate slots.\nIf a finalizing slot was previously executed as candidate and neither itself nor any if its ancestors has changed since the execution,\nthe results of the slot's candidate execution are simply written to the final state to avoid re-executing it."),(0,r.kt)("p",null,"When a slot is executed, if it contains a block, that block is executed.\nTHe block's operations are tentatively executed in the order they appear in the block.\nFor each operation in a block, the following is performed:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Gas check: if the remaining block gas (starting from ",(0,r.kt)("inlineCode",{parentName:"li"},"MAX_BLOCK_GAS = 4294967295"),") is not enough to supply the operation's ",(0,r.kt)("inlineCode",{parentName:"li"},"max_gas"),", the operation is ignored."),(0,r.kt)("li",{parentName:"ul"},"Thread check: if the thread of the operation sender does not match the thread of the block, the operation is ignored."),(0,r.kt)("li",{parentName:"ul"},"Period check: if the slot period of the block is not within the range of validity periods of the operation, the operation is ignored. The validity period interval of an operation ",(0,r.kt)("inlineCode",{parentName:"li"},"Op")," is: ",(0,r.kt)("inlineCode",{parentName:"li"},"[expiration_period - 10, expiration_period]"),"."),(0,r.kt)("li",{parentName:"ul"},"Reuse check: if the operation is in the list of executed operations, the operation is ignored."),(0,r.kt)("li",{parentName:"ul"},"Fee spending: spend the fee from the sender's account. If this spending fails, ignore the operation."),(0,r.kt)("li",{parentName:"ul"},"Subtract the operation's ",(0,r.kt)("inlineCode",{parentName:"li"},"max_gas")," from the remaining block gas."),(0,r.kt)("li",{parentName:"ul"},"Add the operation to the list of executed operations. Note that operations with an expiry period that is earlier or equal to the latest final period in the operation's thread are removed from this list after 10 extra periods in order to cap memory use."),(0,r.kt)("li",{parentName:"ul"},"If any of the previous steps failed, the operation is considered ",(0,r.kt)("strong",{parentName:"li"},"NOT EXECUTED"),", it is ignored and the block producer does not pocket any fees from it while wasting block space. Block producers should therefore be careful about the operations they choose to include or they might not get any fees from them. Thanks to sharding and the declarative ",(0,r.kt)("inlineCode",{parentName:"li"},"max_gas")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"max_coins")," operation fields, block prodcuers can keep track of balances and gas usage without having to simulate the complete execution of candidate operations in order to avoid this pitfall."),(0,r.kt)("li",{parentName:"ul"},"From there on, the operation is considered executed."),(0,r.kt)("li",{parentName:"ul"},"Run the payload of the operation (for example call a smart contract). This can succeed or fail.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"In case of payload run failure, all the consequences of the payload run are rolled back, but the fee is still spent and the operation is still considered executed. This is because block producers have not enough computing power to simulate running all pending operations: this failure is the operation producer's responsibility. In this case, the operation is then considered ",(0,r.kt)("strong",{parentName:"li"},"EXECUTED WITH FAILURE"),"."),(0,r.kt)("li",{parentName:"ul"},"In case of payload run success, the consequences of the execution are kept, and the operation is considered ",(0,r.kt)("strong",{parentName:"li"},"EXECUTED WITH SUCCESS"),".")))),(0,r.kt)("p",null,"Different types of operations have different payload run failure cases:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Transaction"),": fails if the balance of the origin account is not enough to cover the amount of the transaction."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"RollBuy"),": fails if the balance of the origin account is not enough to cover the amount of the roll buy."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"RollSell"),": fails if the the origin account has not enough rolls to sell."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"CallSC"),": fails if any of the following happen:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"the balance of the origin account is not enough to cover the coins being transferred"),(0,r.kt)("li",{parentName:"ul"},"the target smart contract is not found"),(0,r.kt)("li",{parentName:"ul"},"the target smart contract has invalid bytecode"),(0,r.kt)("li",{parentName:"ul"},"the target smart contract exposes no function with the given name and expected prototype."),(0,r.kt)("li",{parentName:"ul"},"the smart contract execution in the VM exceeds ",(0,r.kt)("inlineCode",{parentName:"li"},"max_gas")),(0,r.kt)("li",{parentName:"ul"},"the smart contract execution in the VM raises a runtime exception"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ExecuteSC"),": fails if any of the following happen:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"the bytecode is invalid"),(0,r.kt)("li",{parentName:"ul"},"the bytecode does not expose a ",(0,r.kt)("inlineCode",{parentName:"li"},"main")," function with the right prototype"),(0,r.kt)("li",{parentName:"ul"},"the smart contract execution in the VM exceeds ",(0,r.kt)("inlineCode",{parentName:"li"},"max_gas")),(0,r.kt)("li",{parentName:"ul"},"the smart contract execution in the VM raises a runtime exception"),(0,r.kt)("li",{parentName:"ul"},"the smart contract execution spends more than ",(0,r.kt)("inlineCode",{parentName:"li"},"max_coins")," from the sender account")))),(0,r.kt)("p",null,"The operation execution process in Massa implies some peculiarities:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the same operation can be included zero, one or many times in the same block or in different blocks but is executed either 0 or 1 times in total"),(0,r.kt)("li",{parentName:"ul"},"it is not because an operation is included in a final block that the operation is executed as final")),(0,r.kt)("h4",{id:"operation-pool-and-operation-inclusion"},"Operation pool and operation inclusion"),(0,r.kt)("p",null,"When creating blocks, block producers are free to include the operations they want in their blocks with certain constraints\nthat would make the block non-legal and rejected at reception if they are not respected:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"all operations in the block need to be well-formed"),(0,r.kt)("li",{parentName:"ul"},"all the signatures of the included operations need to be legal"),(0,r.kt)("li",{parentName:"ul"},"the cumulated size of all the operations in the block must be at most 1MB")),(0,r.kt)("p",null,"Block producers keep candidate operations in their operation pool.\nHowever, memory constraints on block producer hardware require regular pruning of this pool to keep it small and tailored to the block producer's needs:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"discard operations that do not match the legality constraints listed above"),(0,r.kt)("li",{parentName:"ul"},"discard operations that can not be included by this block producer given the expiry periods of the operation and proof-of-stake draws")),(0,r.kt)("p",null,"Block producers maximize their gains by prioritizing the operations that maximize their expected rewards.\nHowever, they don't have the computational power to simulate the execution of all potential operations."),(0,r.kt)("p",null,"To solve this problem, operations are scored by block producers to estimate their expected rewards.\nThis is done by a scoring algorithm that takes into account:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the expected rewards coming from the operation's ",(0,r.kt)("inlineCode",{parentName:"li"},"fee")),(0,r.kt)("li",{parentName:"ul"},"the probability of executing of the operation based on:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"whether the operation was already executed previously"),(0,r.kt)("li",{parentName:"ul"},"the number of opportunities other block producers have to execute the operation before the current node gets a chance to include it based on proof-of-stake selections"))),(0,r.kt)("li",{parentName:"ul"},"the usage of resources by the operation:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"the operation size (occupying space in the finite block size)"),(0,r.kt)("li",{parentName:"ul"},"the operation ",(0,r.kt)("inlineCode",{parentName:"li"},"max_gas")," (occupying gas in the finite block gas ",(0,r.kt)("inlineCode",{parentName:"li"},"MAX_BLOCK_GAS"),")\nOperations are then kept sorted by score, and the ones with the worst scores are discarded to respect the max size of the pool.")))),(0,r.kt)("p",null,"Sorted operations are then scanned based on their declarative coin spending (",(0,r.kt)("inlineCode",{parentName:"p"},"fee + max_coins"),")\nand operations that overflow their sender's candidate balance given those cumulated spendings are discarded.\nThe accurate evaluation of the balance without execution is made possible by sharding:\nno operation executed in blocks being created elsewhere at the same time can spend those coins.\nThis protects the pool from flood attacks and guarantees that the operation fees can be spent."),(0,r.kt)("p",null,"In Massa, operation pools are highly non-deterministic and depend on each block producer's proof-of-stake draws.\nThe operation pool can therefore not be used as a reliable source of information about the propagation state of an operation."),(0,r.kt)("h4",{id:"operation-execution-status-and-finality"},"Operation execution status and finality"),(0,r.kt)("p",null,"Because of the peculiar way Massa handles operations to achieve its scalability, security and decentralization goals,\ntracking the state of execution of an operation requires understanding certain principles."),(0,r.kt)("p",null,"At the output of an executed slot ",(0,r.kt)("inlineCode",{parentName:"p"},"S"),", an operation can be in one of the following observable states:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"EXECUTABLE_OR_EXPIRED"),": the operation is not in the list of previously executed operations at the output of ",(0,r.kt)("inlineCode",{parentName:"li"},"S"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"If the operation's expiry date is earlier or equal to the period of ",(0,r.kt)("inlineCode",{parentName:"li"},"S"),", then the operation can not be executed anymore:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"The operation might never have been executed previously"),(0,r.kt)("li",{parentName:"ul"},"The operation might have been executed in a slot that finalized more than 10 periods ago. This is because the list of executed operations is pruned to limit its memory usage (see TODO operation execution)."))),(0,r.kt)("li",{parentName:"ul"},"Otherwise, it means that the operation was never executed and can be executed in the future."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"EXECUTED_WITH_SUCCESS"),": the operation was executed at or before ",(0,r.kt)("inlineCode",{parentName:"li"},"S")," and its payload run was successful (see TODO link op exec). The operation can not be executed anymore."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"EXECUTED_WITH_FAILURE"),": the operation was executed at or before ",(0,r.kt)("inlineCode",{parentName:"li"},"S")," and its payload run generated errors (see TODO link op exec). The operation can not be executed anymore.")),(0,r.kt)("p",null,"If the slot ",(0,r.kt)("inlineCode",{parentName:"p"},"S")," is the latest candidate slot, then the observed status of a given operation at the output of ",(0,r.kt)("inlineCode",{parentName:"p"},"S")," is considered candidate.\nAs candidate slots are executed, candidate operation states can transition from any state into any other because blockclique changes might happen and rewrite the slot history."),(0,r.kt)("p",null,"If the slot ",(0,r.kt)("inlineCode",{parentName:"p"},"S")," is the latest executed final slot, then the observed status of a given operation at the output of ",(0,r.kt)("inlineCode",{parentName:"p"},"S")," is considered final.\nAs final slots are executed, the following final operation state transitions can be observed:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"EXECUTABLE_OR_EXPIRED")," -> ",(0,r.kt)("inlineCode",{parentName:"li"},"EXECUTED_WITH_SUCCESS"),": the operation was executed as final with success"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"EXECUTABLE_OR_EXPIRED")," -> ",(0,r.kt)("inlineCode",{parentName:"li"},"EXECUTED_WITH_SUCCESS"),": the operation was executed as final with failure"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"EXECUTED_WITH_SUCCESS")," -> ",(0,r.kt)("inlineCode",{parentName:"li"},"EXECUTABLE_OR_EXPIRED"),": the operation was executed as final with success and then it expired and was pruned away"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"EXECUTED_WITH_FAILURE")," -> ",(0,r.kt)("inlineCode",{parentName:"li"},"EXECUTABLE_OR_EXPIRED"),": the operation was executed as final with failure and then it expired and was pruned away")),(0,r.kt)("p",null,"Operations are guaranteed to be kept in the ",(0,r.kt)("inlineCode",{parentName:"p"},"EXECUTED_WITH_SUCCESS")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"EXECUTED_WITH_FAILURE")," state for at least 10 periods (2 minutes and 40 seconds)\nto give enough time for operators to register those states before they are pruned."),(0,r.kt)("h3",{id:"endorsements"},"Endorsements"),(0,r.kt)("p",null,"Endorsements are optionally included in the block, but their inclusion is incentivized for block creators. They are\nvalidations of the fact that the parent block on the thread of the block is the best parent that could have been\nchosen, done by other nodes that have also been deterministically selected via the proof of stake probability\ndistribution (see below). A comprehensive description of endorsements can be found ",(0,r.kt)("a",{parentName:"p",href:"/docs/learn/architecture/consensus-quality#endorsement"},"here"),", so we will\nnot go further into details in the context of this introduction."))}m.isMDXComponent=!0},2776:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/block_parents.drawio-38637c12a34e50307bf25a25f082254d.svg"},812:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/structure.drawio-5ccea2d6795f98b55e11a04ae9ce1ae7.svg"}}]);