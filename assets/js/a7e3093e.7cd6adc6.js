"use strict";(self.webpackChunkdocu_dev=self.webpackChunkdocu_dev||[]).push([[942],{5680:(e,a,r)=>{r.d(a,{xA:()=>c,yg:()=>g});var t=r(6540);function n(e,a,r){return a in e?Object.defineProperty(e,a,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[a]=r,e}function l(e,a){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var a=1;a<arguments.length;a++){var r=null!=arguments[a]?arguments[a]:{};a%2?l(Object(r),!0).forEach((function(a){n(e,a,r[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(r,a))}))}return e}function o(e,a){if(null==e)return{};var r,t,n=function(e,a){if(null==e)return{};var r,t,n={},l=Object.keys(e);for(t=0;t<l.length;t++)r=l[t],a.indexOf(r)>=0||(n[r]=e[r]);return n}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)r=l[t],a.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=t.createContext({}),p=function(e){var a=t.useContext(s),r=a;return e&&(r="function"==typeof e?e(a):i(i({},a),e)),r},c=function(e){var a=p(e.components);return t.createElement(s.Provider,{value:a},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},m=t.forwardRef((function(e,a){var r=e.components,n=e.mdxType,l=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(r),m=n,g=u["".concat(s,".").concat(m)]||u[m]||d[m]||l;return r?t.createElement(g,i(i({ref:a},c),{},{components:r})):t.createElement(g,i({ref:a},c))}));function g(e,a){var r=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var l=r.length,i=new Array(l);i[0]=m;var o={};for(var s in a)hasOwnProperty.call(a,s)&&(o[s]=a[s]);o.originalType=e,o[u]="string"==typeof e?e:n,i[1]=o;for(var p=2;p<l;p++)i[p]=r[p];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},6284:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var t=r(8168),n=(r(6540),r(5680));const l={id:"provider",sidebar_label:"Provider",sidebar_position:3},i="Provider",o={unversionedId:"build/web3/provider",id:"build/web3/provider",title:"Provider",description:"A Provider is a fundamental object used to interact with the Massa blockchain. It provides methods for various blockchain operations, including balance retrieval, network information, signing data, and executing smart contract operations.",source:"@site/docs/build/web3/provider.md",sourceDirName:"build/web3",slug:"/build/web3/provider",permalink:"/docs/build/web3/provider",draft:!1,editUrl:"https://github.com/massalabs/docs/tree/main/docs/build/web3/provider.md",tags:[],version:"current",lastUpdatedBy:"Damir Vodenicarevic",lastUpdatedAt:1726774423,formattedLastUpdatedAt:"Sep 19, 2024",sidebarPosition:3,frontMatter:{id:"provider",sidebar_label:"Provider",sidebar_position:3},sidebar:"buildSidebar",previous:{title:"Prerequisites",permalink:"/docs/build/web3/prerequisites"},next:{title:"Wallet",permalink:"/docs/build/web3/wallet"}},s={},p=[{value:"Creating a Provider",id:"creating-a-provider",level:2},{value:"1. From a Wallet",id:"1-from-a-wallet",level:3},{value:"2. From a KeyPair or Environment Variable",id:"2-from-a-keypair-or-environment-variable",level:3},{value:"Provider Methods",id:"provider-methods",level:2}],c={toc:p},u="wrapper";function d(e){let{components:a,...r}=e;return(0,n.yg)(u,(0,t.A)({},c,r,{components:a,mdxType:"MDXLayout"}),(0,n.yg)("h1",{id:"provider"},"Provider"),(0,n.yg)("p",null,"A Provider is a fundamental object used to interact with the Massa blockchain. It provides methods for various blockchain operations, including balance retrieval, network information, signing data, and executing smart contract operations."),(0,n.yg)("p",null,"A Provider can be created from a KeyPair or accessed from a Wallet account. It can be used to sign transactions and interact with the blockchain."),(0,n.yg)("h2",{id:"creating-a-provider"},"Creating a Provider"),(0,n.yg)("p",null,"There are multiple ways to create a Provider, depending on your use case. Here are two common methods:"),(0,n.yg)("h3",{id:"1-from-a-wallet"},"1. From a Wallet"),(0,n.yg)("p",null,"In a browser environment, you can create a Provider from a Wallet. This is useful for dApps that interact with user wallets."),(0,n.yg)("p",null,"To use the Provider from a wallet you need two things:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},(0,n.yg)("strong",{parentName:"p"},"A wallet installed"),": It can be MassaStation, bearby or any other wallet that supports the Massa blockchain. See ",(0,n.yg)("a",{parentName:"p",href:"/docs/build/wallet/intro"},"wallet section"),".")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},(0,n.yg)("strong",{parentName:"p"},"The wallet-provider package installed"),":"))),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-typescript"},"npm install @massalabs/wallet-provider@next\nnpm install @massalabs/massa-web3@next\n")),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-typescript"},'import { getWallets } from "@massalabs/wallet-provider";\n\n// First we get the list of wallets installed\nconst walletList = await getWallets();\n\n// Then we find the wallet we want to use\nconst wallet = walletList.find(\n  (provider) => provider.name() === "MASSASTATION"\n);\n\nif (!wallet) {\n  console.log("No wallet found");\n  return;\n}\n\n// We get the accounts from the wallet\nconst accounts = await wallet?.accounts();\n\nif (accounts.length === 0) {\n  console.log("No accounts found");\n  return;\n}\n\n// We use the first account as the provider\nconst provider = accounts[0];\n')),(0,n.yg)("h3",{id:"2-from-a-keypair-or-environment-variable"},"2. From a KeyPair or Environment Variable"),(0,n.yg)("p",null,"For backend applications or when you have direct access to private keys, you can create a Provider from a KeyPair. This method is also useful when working with environment variables for increased security."),(0,n.yg)("p",null,"First you will need to install the ",(0,n.yg)("inlineCode",{parentName:"p"},"@massalabs/massa-web3")," package:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-typescript"},"npm install @massalabs/massa-web3@next\n")),(0,n.yg)("p",null,"Then you can create a Provider from a KeyPair in two ways:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"From a environment variable:"))),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-typescript"},'import { Account as KeyPair, Web3Provider } from "@massalabs/massa-web3";\n// Will use the environment variables at `PRIVATE_KEY` to create a KeyPair\n// but you can also pass the name of the env variable as a string\nconst keyPair = await KeyPair.fromEnv();\n// Will use the KeyPair to create a Provider\nconst provider = Web3Provider.buildnet(keyPair);\n')),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"From a generated KeyPair:"))),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-typescript"},'import { Account as KeyPair, Web3Provider } from "@massalabs/massa-web3";\n\n// Will create a new KeyPair\nconst keyPair = await KeyPair.generate();\n// Will use the KeyPair to create a Provider\nconst provider = Web3Provider.buildnet(keyPair);\n')),(0,n.yg)("h2",{id:"provider-methods"},"Provider Methods"),(0,n.yg)("p",null,"A Provider offers several methods to interact with the Massa blockchain. Here are the available methods:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-typescript"},"get address(): string\n")),(0,n.yg)("p",null,"Returns the address associated with the Provider."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-typescript"},"get accountName(): string\n")),(0,n.yg)("p",null,"Returns the name of the account associated with the Provider."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-typescript"},"get providerName(): string\n")),(0,n.yg)("p",null,"Returns the name of the Provider."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-typescript"},"balance(final: boolean): Promise<bigint>\n")),(0,n.yg)("p",null,"Retrieves the balance of the account."),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"final"),": If true, returns the final (confirmed) balance. If false, returns the speculative (possibly unconfirmed) balance.")),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-typescript"},"networkInfos(): Promise<Network>\n")),(0,n.yg)("p",null,"Retrieves information about the Massa network."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-typescript"},"sign(data: Buffer | Uint8Array | string): Promise<SignedData>\n")),(0,n.yg)("p",null,"Signs the provided data."),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"data"),": The data to be signed.")),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-typescript"},"buyRolls(amount: Mas, opts?: OperationOptions): Promise<Operation>\n")),(0,n.yg)("p",null,"Buys rolls (staking units) on the Massa blockchain."),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"amount"),": The amount of MAS to spend on buying rolls."),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"opts"),": Optional operation parameters.")),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-typescript"},"sellRolls(amount: Mas, opts?: OperationOptions): Promise<Operation>\n")),(0,n.yg)("p",null,"Sells rolls (staking units) on the Massa blockchain."),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"amount"),": The number of rolls to sell."),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"opts"),": Optional operation parameters.")),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-typescript"},"transfer(to: Address | string, amount: Mas, opts?: OperationOptions): Promise<Operation>\n")),(0,n.yg)("p",null,"Transfers MAS tokens to another address."),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"to"),": The recipient's address."),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"amount"),": The amount of MAS to transfer."),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"opts"),": Optional operation parameters.")),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-typescript"},"callSC(params: CallSCParams): Promise<Operation>\n")),(0,n.yg)("p",null,"Calls a smart contract function."),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"params"),": Parameters for the smart contract call.")),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-typescript"},"readSC(params: ReadSCParams): Promise<ReadSCData>\n")),(0,n.yg)("p",null,"Reads data from a smart contract without modifying its state."),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"params"),": Parameters for reading from the smart contract.")),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-typescript"},"deploySC(params: DeploySCParams): Promise<SmartContract>\n")),(0,n.yg)("p",null,"Deploys a smart contract to the Massa blockchain."),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"params"),": Parameters for deploying the smart contract.")),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-typescript"},"getOperationStatus(opId: string): Promise<OperationStatus>\n")),(0,n.yg)("p",null,"Retrieves the status of an operation."),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"opId"),": The ID of the operation to check.")),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-typescript"},"getEvents(filter: EventFilter): Promise<SCEvent[]>\n")),(0,n.yg)("p",null,"Retrieves events based on the provided filter."),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"filter"),": Criteria for filtering events.")))}d.isMDXComponent=!0}}]);