"use strict";(self.webpackChunkdocu_dev=self.webpackChunkdocu_dev||[]).push([[942],{6011:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>t,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=r(4848),s=r(8453);const i={id:"provider",sidebar_label:"Provider",sidebar_position:3},t="Provider",l={id:"build/web3/provider",title:"Provider",description:"A Provider is a fundamental object used to interact with the Massa blockchain. It provides methods for various blockchain operations, including balance retrieval, network information, signing data, and executing smart contract operations.",source:"@site/docs/build/web3/provider.md",sourceDirName:"build/web3",slug:"/build/web3/provider",permalink:"/docs/build/web3/provider",draft:!1,unlisted:!1,editUrl:"https://github.com/massalabs/docs/tree/main/docs/build/web3/provider.md",tags:[],version:"current",lastUpdatedBy:"Damir Vodenicarevic",lastUpdatedAt:1723704495e3,sidebarPosition:3,frontMatter:{id:"provider",sidebar_label:"Provider",sidebar_position:3},sidebar:"buildSidebar",previous:{title:"Prerequisites",permalink:"/docs/build/web3/prerequisites"},next:{title:"Wallet",permalink:"/docs/build/web3/wallet"}},o={},c=[{value:"Creating a Provider",id:"creating-a-provider",level:2},{value:"1. From a Wallet",id:"1-from-a-wallet",level:3},{value:"2. From a KeyPair or Environment Variable",id:"2-from-a-keypair-or-environment-variable",level:3},{value:"Provider Methods",id:"provider-methods",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"provider",children:"Provider"})}),"\n",(0,a.jsx)(n.p,{children:"A Provider is a fundamental object used to interact with the Massa blockchain. It provides methods for various blockchain operations, including balance retrieval, network information, signing data, and executing smart contract operations."}),"\n",(0,a.jsx)(n.p,{children:"A Provider can be created from a KeyPair or accessed from a Wallet account. It can be used to sign transactions and interact with the blockchain."}),"\n",(0,a.jsx)(n.h2,{id:"creating-a-provider",children:"Creating a Provider"}),"\n",(0,a.jsx)(n.p,{children:"There are multiple ways to create a Provider, depending on your use case. Here are two common methods:"}),"\n",(0,a.jsx)(n.h3,{id:"1-from-a-wallet",children:"1. From a Wallet"}),"\n",(0,a.jsx)(n.p,{children:"In a browser environment, you can create a Provider from a Wallet. This is useful for dApps that interact with user wallets."}),"\n",(0,a.jsx)(n.p,{children:"To use the Provider from a wallet you need two things:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"A wallet installed"}),": It can be MassaStation, bearby or any other wallet that supports the Massa blockchain. See ",(0,a.jsx)(n.a,{href:"/docs/build/wallet/intro",children:"wallet section"}),"."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"The wallet-provider package installed"}),":"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"npm install @massalabs/wallet-provider@next\nnpm install @massalabs/massa-web3@next\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'import { getWallets } from "@massalabs/wallet-provider";\n\n// First we get the list of wallets installed\nconst walletList = await getWallets();\n\n// Then we find the wallet we want to use\nconst wallet = walletList.find(\n  (provider) => provider.name() === "MASSASTATION"\n);\n\nif (!wallet) {\n  console.log("No wallet found");\n  return;\n}\n\n// We get the accounts from the wallet\nconst accounts = await wallet?.accounts();\n\nif (accounts.length === 0) {\n  console.log("No accounts found");\n  return;\n}\n\n// We use the first account as the provider\nconst provider = accounts[0];\n'})}),"\n",(0,a.jsx)(n.h3,{id:"2-from-a-keypair-or-environment-variable",children:"2. From a KeyPair or Environment Variable"}),"\n",(0,a.jsx)(n.p,{children:"For backend applications or when you have direct access to private keys, you can create a Provider from a KeyPair. This method is also useful when working with environment variables for increased security."}),"\n",(0,a.jsxs)(n.p,{children:["First you will need to install the ",(0,a.jsx)(n.code,{children:"@massalabs/massa-web3"})," package:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"npm install @massalabs/massa-web3@next\n"})}),"\n",(0,a.jsx)(n.p,{children:"Then you can create a Provider from a KeyPair in two ways:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.strong,{children:"From a environment variable:"})}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'import { Account as KeyPair, Web3Provider } from "@massalabs/massa-web3";\n// Will use the environment variables at `PRIVATE_KEY` to create a KeyPair\n// but you can also pass the name of the env variable as a string\nconst keyPair = await KeyPair.fromEnv();\n// Will use the KeyPair to create a Provider\nconst provider = Web3Provider.buildnet(keyPair);\n'})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.strong,{children:"From a generated KeyPair:"})}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'import { Account as KeyPair, Web3Provider } from "@massalabs/massa-web3";\n\n// Will create a new KeyPair\nconst keyPair = await KeyPair.generate();\n// Will use the KeyPair to create a Provider\nconst provider = Web3Provider.buildnet(keyPair);\n'})}),"\n",(0,a.jsx)(n.h2,{id:"provider-methods",children:"Provider Methods"}),"\n",(0,a.jsx)(n.p,{children:"A Provider offers several methods to interact with the Massa blockchain. Here are the available methods:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"get address(): string\n"})}),"\n",(0,a.jsx)(n.p,{children:"Returns the address associated with the Provider."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"get accountName(): string\n"})}),"\n",(0,a.jsx)(n.p,{children:"Returns the name of the account associated with the Provider."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"get providerName(): string\n"})}),"\n",(0,a.jsx)(n.p,{children:"Returns the name of the Provider."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"balance(final: boolean): Promise<bigint>\n"})}),"\n",(0,a.jsx)(n.p,{children:"Retrieves the balance of the account."}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"final"}),": If true, returns the final (confirmed) balance. If false, returns the speculative (possibly unconfirmed) balance."]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"networkInfos(): Promise<Network>\n"})}),"\n",(0,a.jsx)(n.p,{children:"Retrieves information about the Massa network."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"sign(data: Buffer | Uint8Array | string): Promise<SignedData>\n"})}),"\n",(0,a.jsx)(n.p,{children:"Signs the provided data."}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"data"}),": The data to be signed."]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"buyRolls(amount: Mas, opts?: OperationOptions): Promise<Operation>\n"})}),"\n",(0,a.jsx)(n.p,{children:"Buys rolls (staking units) on the Massa blockchain."}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"amount"}),": The amount of MAS to spend on buying rolls."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"opts"}),": Optional operation parameters."]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"sellRolls(amount: Mas, opts?: OperationOptions): Promise<Operation>\n"})}),"\n",(0,a.jsx)(n.p,{children:"Sells rolls (staking units) on the Massa blockchain."}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"amount"}),": The number of rolls to sell."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"opts"}),": Optional operation parameters."]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"transfer(to: Address | string, amount: Mas, opts?: OperationOptions): Promise<Operation>\n"})}),"\n",(0,a.jsx)(n.p,{children:"Transfers MAS tokens to another address."}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"to"}),": The recipient's address."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"amount"}),": The amount of MAS to transfer."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"opts"}),": Optional operation parameters."]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"callSC(params: CallSCParams): Promise<Operation>\n"})}),"\n",(0,a.jsx)(n.p,{children:"Calls a smart contract function."}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"params"}),": Parameters for the smart contract call."]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"readSC(params: ReadSCParams): Promise<ReadSCData>\n"})}),"\n",(0,a.jsx)(n.p,{children:"Reads data from a smart contract without modifying its state."}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"params"}),": Parameters for reading from the smart contract."]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"deploySC(params: DeploySCParams): Promise<SmartContract>\n"})}),"\n",(0,a.jsx)(n.p,{children:"Deploys a smart contract to the Massa blockchain."}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"params"}),": Parameters for deploying the smart contract."]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"getOperationStatus(opId: string): Promise<OperationStatus>\n"})}),"\n",(0,a.jsx)(n.p,{children:"Retrieves the status of an operation."}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"opId"}),": The ID of the operation to check."]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"getEvents(filter: EventFilter): Promise<SCEvent[]>\n"})}),"\n",(0,a.jsx)(n.p,{children:"Retrieves events based on the provided filter."}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"filter"}),": Criteria for filtering events."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>l});var a=r(6540);const s={},i=a.createContext(s);function t(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);