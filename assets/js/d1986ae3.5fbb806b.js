"use strict";(self.webpackChunkdocu_dev=self.webpackChunkdocu_dev||[]).push([[9682],{8689:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>c,toc:()=>l});var t=s(4848),a=s(8453);const r={id:"mrc20",sidebar_label:"MRC20 Contract Wrapper"},o="MRC20 Contract Wrapper",c={id:"build/web3/contracts-wrappers/mrc20",title:"MRC20 Contract Wrapper",description:"The MRC20 class is a wrapper for interacting with MRC20 token contracts on the Massa blockchain. It extends the SmartContract class and provides methods to easily interact with standard MRC20 functions.",source:"@site/docs/build/web3/contracts-wrappers/mrc20.md",sourceDirName:"build/web3/contracts-wrappers",slug:"/build/web3/contracts-wrappers/mrc20",permalink:"/docs/build/web3/contracts-wrappers/mrc20",draft:!1,unlisted:!1,editUrl:"https://github.com/massalabs/docs/tree/main/docs/build/web3/contracts-wrappers/mrc20.md",tags:[],version:"current",lastUpdatedBy:"Damir Vodenicarevic",lastUpdatedAt:1723580599e3,frontMatter:{id:"mrc20",sidebar_label:"MRC20 Contract Wrapper"},sidebar:"buildSidebar",previous:{title:"Introduction",permalink:"/docs/build/web3/contracts-wrappers/contract-wrappers-intro"},next:{title:"Introduction",permalink:"/docs/build/wallet/intro"}},i={},l=[{value:"Constructor",id:"constructor",level:2},{value:"Methods",id:"methods",level:2},{value:"Read Methods",id:"read-methods",level:3},{value:"Write Methods",id:"write-methods",level:3},{value:"Usage Example",id:"usage-example",level:2},{value:"Note on BigInt Usage",id:"note-on-bigint-usage",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"mrc20-contract-wrapper",children:"MRC20 Contract Wrapper"})}),"\n",(0,t.jsx)(n.p,{children:"The MRC20 class is a wrapper for interacting with MRC20 token contracts on the Massa blockchain. It extends the SmartContract class and provides methods to easily interact with standard MRC20 functions."}),"\n",(0,t.jsx)(n.h2,{id:"constructor",children:"Constructor"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"constructor(provider: Provider, address: string)\n"})}),"\n",(0,t.jsx)(n.p,{children:"Creates a new MRC20 object."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"provider"}),": The Provider object used to interact with the blockchain."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"address"}),": The address of the MRC20 token contract."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,t.jsx)(n.h3,{id:"read-methods",children:"Read Methods"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"async version(options?: ReadSCOptions): Promise<string>\n"})}),"\n",(0,t.jsx)(n.p,{children:"Retrieves the version of the MRC20 contract."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"async name(options?: ReadSCOptions): Promise<string>\n"})}),"\n",(0,t.jsx)(n.p,{children:"Retrieves the name of the token."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"async symbol(options?: ReadSCOptions): Promise<string>\n"})}),"\n",(0,t.jsx)(n.p,{children:"Retrieves the symbol of the token."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"async decimals(options?: ReadSCOptions): Promise<number>\n"})}),"\n",(0,t.jsx)(n.p,{children:"Retrieves the number of decimals used by the token."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"async totalSupply(options?: ReadSCOptions): Promise<bigint>\n"})}),"\n",(0,t.jsx)(n.p,{children:"Retrieves the total supply of the token."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"async balanceOf(address: string, options?: ReadSCOptions): Promise<bigint>\n"})}),"\n",(0,t.jsx)(n.p,{children:"Retrieves the balance of the specified address."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"async allowance(ownerAddress: string, spenderAddress: string, options?: ReadSCOptions): Promise<bigint>\n"})}),"\n",(0,t.jsx)(n.p,{children:"Retrieves the amount of tokens that the spender is allowed to spend on behalf of the owner."}),"\n",(0,t.jsx)(n.h3,{id:"write-methods",children:"Write Methods"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"async transfer(to: string, amount: bigint, options?: CallSCOptions): Promise<Operation>\n"})}),"\n",(0,t.jsx)(n.p,{children:"Transfers tokens to the specified address."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"async increaseAllowance(spenderAddress: string, amount: bigint, options?: CallSCOptions): Promise<Operation>\n"})}),"\n",(0,t.jsx)(n.p,{children:"Increases the allowance granted to the spender."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"async decreaseAllowance(spenderAddress: string, amount: bigint, options?: CallSCOptions): Promise<Operation>\n"})}),"\n",(0,t.jsx)(n.p,{children:"Decreases the allowance granted to the spender."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"async transferFrom(spenderAddress: string, recipientAddress: string, amount: bigint, options?: CallSCOptions): Promise<Operation>\n"})}),"\n",(0,t.jsx)(n.p,{children:"Transfers tokens from one address to another using the allowance mechanism."}),"\n",(0,t.jsx)(n.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,t.jsx)(n.p,{children:"Here's an example of how to use the MRC20 wrapper:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'import { MRC20 } from "@massalabs/massa-web3";\nimport { Provider } from "@massalabs/massa-web3";\n\nasync function mrc20Example(provider: Provider) {\n  const WMAS_ADDRESS = "AS12k8viVmqPtRuXzCm6rKXjLgpQWqbuMjc37YHhB452KSUUb9FgL";\n  const wmasContract = new MRC20(provider, WMAS_ADDRESS);\n\n  // Read token information\n  const name = await wmasContract.name();\n  const symbol = await wmasContract.symbol();\n  const decimals = await wmasContract.decimals();\n  const totalSupply = await wmasContract.totalSupply();\n\n  console.log(`Token: ${name} (${symbol})`);\n  console.log(`Decimals: ${decimals}`);\n  console.log(`Total Supply: ${totalSupply}`);\n\n  // Check balance\n  const balance = await wmasContract.balanceOf(provider.address);\n  console.log(`Your balance: ${balance}`);\n\n  // Perform a transfer\n  const recipient = "AU1wN8rn4SkwYSTDF3dHFY4U28KtsqKL1NnEjDZhHnHEy6cEQm53";\n  const amount = 1000n; // Transfer 1000 tokens (adjust based on decimals)\n  const transferOperation = await wmasContract.transfer(recipient, amount);\n  await transferOperation.waitSpeculativeExecution();\n  console.log("Transfer completed");\n\n  // Check new balance\n  const newBalance = await wmasContract.balanceOf(provider.address);\n  console.log(`Your new balance: ${newBalance}`);\n\n  // Increase allowance\n  const spender = "AU1wN8rn4SkwYSTDF3dHFY4U28KtsqKL1NnEjDZhHnHEy6cEQm53";\n  const allowanceAmount = 5000n;\n  const increaseAllowanceOperation = await wmasContract.increaseAllowance(\n    spender,\n    allowanceAmount\n  );\n  await increaseAllowanceOperation.waitSpeculativeExecution();\n  console.log("Allowance increased");\n\n  // Check allowance\n  const allowance = await wmasContract.allowance(provider.address, spender);\n  console.log(`Allowance for spender: ${allowance}`);\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"This example demonstrates how to create an MRC20 object, read token information, check balances, perform transfers, and manage allowances."}),"\n",(0,t.jsx)(n.p,{children:"Remember to handle errors appropriately in your actual implementation, as blockchain operations can fail due to various reasons such as insufficient balance, network issues, or contract errors."}),"\n",(0,t.jsx)(n.h2,{id:"note-on-bigint-usage",children:"Note on BigInt Usage"}),"\n",(0,t.jsxs)(n.p,{children:["The MRC20 wrapper uses ",(0,t.jsx)(n.code,{children:"bigint"})," for amount values to handle large numbers accurately. When working with token amounts, remember to consider the token's decimals. For example, if a token has 6 decimals, an amount of 1 token would be represented as ",(0,t.jsx)(n.code,{children:"1_000_000n"}),"."]})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>c});var t=s(6540);const a={},r=t.createContext(a);function o(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);