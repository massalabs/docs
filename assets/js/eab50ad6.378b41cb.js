"use strict";(self.webpackChunkdocu_dev=self.webpackChunkdocu_dev||[]).push([[8563],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>h});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=r.createContext({}),c=function(e){var t=r.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},d=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=c(a),m=n,h=p["".concat(l,".").concat(m)]||p[m]||u[m]||i;return a?r.createElement(h,o(o({ref:t},d),{},{components:a})):r.createElement(h,o({ref:t},d))}));function h(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:n,o[1]=s;for(var c=2;c<i;c++)o[c]=a[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},1390:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=a(7462),n=(a(7294),a(3905));const i={},o="Storage",s={unversionedId:"build/smart-contract/basic-concepts/storage",id:"build/smart-contract/basic-concepts/storage",title:"Storage",description:"In Massa smart contracts, all data stored on the blockchain is managed as raw bytes. This approach ensures efficient data handling, but it requires that all keys and values are serialized. Fortunately, the Massa SDK provides methods that simplify this process by handling serialization behind the scenes, allowing you to work with familiar data types like string or Args when accessing storage.",source:"@site/docs/build/smart-contract/basic-concepts/storage.mdx",sourceDirName:"build/smart-contract/basic-concepts",slug:"/build/smart-contract/basic-concepts/storage",permalink:"/docs/build/smart-contract/basic-concepts/storage",draft:!1,editUrl:"https://github.com/massalabs/docs/tree/main/docs/build/smart-contract/basic-concepts/storage.mdx",tags:[],version:"current",lastUpdatedBy:"BenRey",lastUpdatedAt:1732714115,formattedLastUpdatedAt:"Nov 27, 2024",frontMatter:{},sidebar:"buildSidebar",previous:{title:"Interacting with MAS Tokens in Massa smart contracts",permalink:"/docs/build/smart-contract/basic-concepts/coins"},next:{title:"Generic Serializable",permalink:"/docs/build/smart-contract/basic-concepts/serializable"}},l={},c=[{value:"Storage Methods",id:"storage-methods",level:2},{value:"Basic Storage Operations:",id:"basic-storage-operations",level:3},{value:"Using storage:",id:"using-storage",level:3},{value:"Interacting with storage from another address:",id:"interacting-with-storage-from-another-address",level:3}],d={toc:c},p="wrapper";function u(e){let{components:t,...a}=e;return(0,n.kt)(p,(0,r.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"storage"},"Storage"),(0,n.kt)("p",null,"In Massa smart contracts, all data stored on the blockchain is managed as raw bytes. This approach ensures efficient data handling, but it requires that all keys and values are serialized. Fortunately, the Massa SDK provides methods that simplify this process by handling serialization behind the scenes, allowing you to work with familiar data types like string or Args when accessing storage."),(0,n.kt)("h2",{id:"storage-methods"},"Storage Methods"),(0,n.kt)("h3",{id:"basic-storage-operations"},"Basic Storage Operations:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"The primary methods for interacting with contract storage are ",(0,n.kt)("inlineCode",{parentName:"li"},"Storage.set"),", ",(0,n.kt)("inlineCode",{parentName:"li"},"Storage.get"),", and ",(0,n.kt)("inlineCode",{parentName:"li"},"Storage.has"),"."),(0,n.kt)("li",{parentName:"ul"},"Although storage keys and values are ultimately stored as raw bytes, these methods accept ",(0,n.kt)("inlineCode",{parentName:"li"},"StaticArray<u8>")," ",(0,n.kt)("inlineCode",{parentName:"li"},"string")," and ",(0,n.kt)("inlineCode",{parentName:"li"},"Args")," as arguments, automatically handling serialization and deserialization.")),(0,n.kt)("p",null,"Here's a quick overview of each method, using ",(0,n.kt)("inlineCode",{parentName:"p"},"T = StaticArray<u8> | string | Args")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"Storage.set(key: T, value: T): void"),":",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Stores the specified value under the provided key. If the key already exists, it updates the value."),(0,n.kt)("li",{parentName:"ul"},"If new storage are used, it will occurs a cost in MAS. Learn more about storage cost ",(0,n.kt)("a",{parentName:"li",href:"https://docs.massa.net/docs/learn/storage-costs"},"here")))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"Storage.append(key: T, value: T): void"),":",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Append data to a storage key"),(0,n.kt)("li",{parentName:"ul"},"If the key doesn't exist, this will stop the operation execution and revert all previously executed code."))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"Storage.get(key: T): T"),":",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Retrieves the value associated with the specified key."),(0,n.kt)("li",{parentName:"ul"},"If the key doesn\u2019t exist, this will stop the operation execution and revert all previously executed code."))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"Storage.has(key: T): bool"),":",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Checks if a value exists for the specified key and returns true if it does, or false if it doesn't."))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"Storage.del(key: T): void"),":",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Delete the key-value pair associated with the specified key."),(0,n.kt)("li",{parentName:"ul"},"If the key doesn't exist, this will stop the operation execution and revert all previously executed code.")))),(0,n.kt)("h3",{id:"using-storage"},"Using storage:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"import { Storage } from '@massalabs/massa-as-sdk';\n\nconst USER_KEY = \"user\"\n\n// Store a value\nexport function setUser(username: string): void {\n    Storage.set(USER_KEY, username);\n}\n\n// Retrieve a value\nexport function getUser(username: string): string {\n    assert(Storage.has(USER_KEY))\n    return Storage.get(USER_KEY, username);\n}\n")),(0,n.kt)("h3",{id:"interacting-with-storage-from-another-address"},"Interacting with storage from another address:"),(0,n.kt)("p",null,"In some cases, you may need to read from or write to the storage of another smart contract or address. For this purpose, Massa provides the Storage.setOf, Storage.appendOf, Storage.getOf, and Storage.hasOf methods, which include an additional parameter for specifying the target address."),(0,n.kt)("p",null,"Here's a quick overview of each method, using ",(0,n.kt)("inlineCode",{parentName:"p"},"T = StaticArray<u8> | string | Args")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"Storage.setOf(address: Address, key: T, value: T): void"),":"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Stores a value in the storage of a specified address under the given key."),(0,n.kt)("li",{parentName:"ul"},"Writing data to another contract storage require the caller to have writte access on the given contract. This occurs only when deploying the contract from another one."))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"Storage.appendOf(address: Address, key: T, value: T): void"),":"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Append data at a storage key"),(0,n.kt)("li",{parentName:"ul"},"Writing data to another contract storage require the caller to have writte access on the given contract. This occurs only when deploying the contract from another one."),(0,n.kt)("li",{parentName:"ul"},"If the key doesn't exist, this will stop the operation execution and revert all previously executed code."))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"Storage.getOf(address: Address, key: T): StaticArray<u8>"),":"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Retrieves a value from the storage of a specified address using the given key."))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"Storage.hasOf(address: Address, key: T): bool"),":"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Checks if a specific key exists in the storage of the specified address."))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"Storage.deleteOf(address: Address, key: T): void"),":"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Delete the key-value pair associated with the specified key in the storage of the specified address."),(0,n.kt)("li",{parentName:"ul"},"Writing data to another contract storage require the caller to have writte access on the given contract. It happen only when deploying the contract from another one."),(0,n.kt)("li",{parentName:"ul"},"If the key doesn't exist, this will stop the operation execution and revert all previously executed code.")))))}u.isMDXComponent=!0}}]);