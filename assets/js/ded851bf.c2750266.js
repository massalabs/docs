"use strict";(self.webpackChunkdocu_dev=self.webpackChunkdocu_dev||[]).push([[2944],{8361:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>c});var r=n(4848),s=n(8453);const o={id:"hello-world-dapp",sidebar_label:'"Hello, World!" dApp'},i='Build a "Hello, World!" dApp',a={id:"build/hello-world-dapp",title:'Build a "Hello, World!" dApp',description:"Welcome, Developer! You're about to embark on an exciting journey where you'll build your very first decentralized application (dApp) using the Massa blockchain. If you're thrilled about the world of blockchain, smart contracts, and dApps, you've come to the right place!",source:"@site/docs/build/hello-world-dapp.mdx",sourceDirName:"build",slug:"/build/hello-world-dapp",permalink:"/docs/build/hello-world-dapp",draft:!1,unlisted:!1,editUrl:"https://github.com/massalabs/docs/tree/main/docs/build/hello-world-dapp.mdx",tags:[],version:"current",lastUpdatedBy:"Damir Vodenicarevic",lastUpdatedAt:1723580599e3,frontMatter:{id:"hello-world-dapp",sidebar_label:'"Hello, World!" dApp'},sidebar:"buildSidebar",previous:{title:"Home",permalink:"/docs/build/home"},next:{title:"Introduction",permalink:"/docs/build/smart-contract/intro"}},l={},c=[{value:"What are we going to do ?",id:"what-are-we-going-to-do-",level:2},{value:"The Smart Contract",id:"the-smart-contract",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Setting up Your Project",id:"setting-up-your-project",level:3},{value:"Step 1: Initialize Your Smart Contract Project",id:"step-1-initialize-your-smart-contract-project",level:4},{value:"Step 2: Setting up the Environment variables",id:"step-2-setting-up-the-environment-variables",level:4},{value:"Writing and Deploying the Smart Contract",id:"writing-and-deploying-the-smart-contract",level:3},{value:"Step 1: Writing the smart contract",id:"step-1-writing-the-smart-contract",level:4},{value:"Step 2: Compile Your Smart Contract",id:"step-2-compile-your-smart-contract",level:4},{value:"Step 3: Deploy the Smart Contract",id:"step-3-deploy-the-smart-contract",level:4},{value:"The Frontend",id:"the-frontend",level:2},{value:"Setting Up Your Project",id:"setting-up-your-project-1",level:3},{value:"Understanding the Code",id:"understanding-the-code",level:3},{value:"Testing your application",id:"testing-your-application",level:2},{value:"Next steps",id:"next-steps",level:2}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"build-a-hello-world-dapp",children:'Build a "Hello, World!" dApp'})}),"\n",(0,r.jsx)(t.p,{children:"Welcome, Developer! You're about to embark on an exciting journey where you'll build your very first decentralized application (dApp) using the Massa blockchain. If you're thrilled about the world of blockchain, smart contracts, and dApps, you've come to the right place!"}),"\n",(0,r.jsx)(t.p,{children:'This guide will help you build a simple "Hello, World!" dApp. We\'ll use a smart contract written in AssemblyScript and a user-friendly frontend designed in React.'}),"\n",(0,r.jsx)(t.h2,{id:"what-are-we-going-to-do-",children:"What are we going to do ?"}),"\n",(0,r.jsx)(t.p,{children:"Here's the scoop: The application we're about to develop is simple. It will allow the user to retrieve a \"Hello, World!\" message that was set during the dApp deployment. This message will be stored on the Massa blockchain and will be permanently visible to all users of our dApp trough a front end."}),"\n",(0,r.jsx)(t.p,{children:"Here's a quick overview of the component that will make up our dApp:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"The Smart Contract (SC)"}),'\nThe smart contract, written in AssemblyScript, is the backbone of our dApp. If you are familiar with web development, you can think of the smart contract as the back end of the application. It will be deployed on the Massa blockchain and will be responsible for storing and retrieving the "Hello, World!" greeting message.']}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"The Frontend"}),'\nA basic web interface built in React will allow users to read the greeting message. This interface will interact with the Massa blockchain by fetching the "Hello, World!" message from our smart contract.']}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"And that's it! Let's get started."}),"\n",(0,r.jsx)(t.h2,{id:"the-smart-contract",children:"The Smart Contract"}),"\n",(0,r.jsx)(t.p,{children:'In this section, we are going to create a smart contract that will be deployed on the Massa blockchain. As explained earlier, this smart contract will be responsible for storing and retrieving the "Hello, World!" message.\nSmart contract in Massa are written in AssemblyScript, a language that is very similar to TypeScript. If you are not familiar with AssemblyScript, don\'t worry! We will guide you through the process of writing your first smart contract.'}),"\n",(0,r.jsx)(t.h3,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsx)(t.p,{children:"Before we start, here's what you'll need:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Node.js and npm installed"}),"\nWe recommend using Node.js version 18 or later, and the compatible npm version. You can download and install Node.js and npm from the official website: ",(0,r.jsx)(t.a,{href:"https://nodejs.org/",children:"https://nodejs.org/"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Massa Wallet and your secret key"}),"\nYou'll need a funded Massa wallet and your secret key before you deploy your smart contract to the Massa blockchain."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.admonition,{type:"info",children:(0,r.jsxs)(t.p,{children:["Not sure how to create and fund a Massa wallet? Check our guide ",(0,r.jsx)(t.a,{href:"/docs/build/wallet/intro",children:"here"}),"."]})}),"\n",(0,r.jsx)(t.h3,{id:"setting-up-your-project",children:"Setting up Your Project"}),"\n",(0,r.jsx)(t.p,{children:"Here are the steps to set up your smart contract project:"}),"\n",(0,r.jsx)(t.h4,{id:"step-1-initialize-your-smart-contract-project",children:"Step 1: Initialize Your Smart Contract Project"}),"\n",(0,r.jsx)(t.p,{children:"First, open a terminal, and navigate to your preferred directory. Now, let's create your project with the following command:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"npx @massalabs/sc-project-initializer init massa-hello-world\n"})}),"\n",(0,r.jsxs)(t.p,{children:["With this command, you have created a new folder named ",(0,r.jsx)(t.code,{children:"massa-hello-world"})," with all the necessary files for developing a Massa smart contract. Navigate to this folder."]}),"\n",(0,r.jsx)(t.p,{children:"Once you have navigated to the project directory, you should see the following files and directories:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:(0,r.jsx)(t.code,{children:"assembly"})}),": This is the directory where your smart contract code resides. Within this, you'll find your contract files in the ",(0,r.jsx)(t.code,{children:"contracts"})," subdirectory and your test files in the ",(0,r.jsx)(t.code,{children:"tests"})," subdirectory."]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:(0,r.jsx)(t.code,{children:".env.example"})}),": This file serves as a template for the ",(0,r.jsx)(t.code,{children:".env"})," file you'll need to create. It outlines the necessary environment variables required to deploy your smart contract."]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:(0,r.jsx)(t.code,{children:"package.json"})}),": This file contains the npm commands crucial for various operations such as checking, testing, building, and deploying your smart contract.\n:::"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.h4,{id:"step-2-setting-up-the-environment-variables",children:"Step 2: Setting up the Environment variables"}),"\n",(0,r.jsx)(t.p,{children:"Seting up a wallet will allow us to sign and pay for the deployment of our smart contract. The wallet will come under the form of a private key."}),"\n",(0,r.jsxs)(t.p,{children:["Copy the content of the ",(0,r.jsx)(t.code,{children:".env.example"})," to a newly created ",(0,r.jsx)(t.code,{children:".env"})," file at the root of your project directory.\nOnce created, edit the ",(0,r.jsx)(t.code,{children:".env"})," file by inserting your wallet's private key."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:'PRIVATE_KEY="Your_private_key_here"\n'})}),"\n",(0,r.jsx)(t.admonition,{type:"info",children:(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"PRIVATE_KEY: This is your wallet's secret key. It will be used to sign the contract deployment transaction. Make sure your wallet is funded."}),"\n"]})}),"\n",(0,r.jsx)(t.h3,{id:"writing-and-deploying-the-smart-contract",children:"Writing and Deploying the Smart Contract"}),"\n",(0,r.jsx)(t.p,{children:"Now that you have set up your project, let's write our smart contract. Our smart contract will let users set and get a greeting message. The message will be stored in the contract storage and will be permanently visible to all users of our dApp. The greeting message will be set during the deployment of the smart contract."}),"\n",(0,r.jsx)(t.h4,{id:"step-1-writing-the-smart-contract",children:"Step 1: Writing the smart contract"}),"\n",(0,r.jsxs)(t.p,{children:["Navigate to the ",(0,r.jsx)(t.code,{children:"assembly/contracts"})," directory and open the ",(0,r.jsx)(t.code,{children:"main.ts"})," file. This is where we will write our smart contract code.\nReplace the content of the ",(0,r.jsx)(t.code,{children:"main.ts"})," file in assembly/contracts with the following code:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-tsx",children:'import { generateEvent, Storage, Context } from "@massalabs/massa-as-sdk";\n\nconst GREETING_KEY = "greeting_key";\n\n/**\n * This function is meant to be called only one time: when the contract is deployed.\n */\nexport function constructor(_: StaticArray<u8>): void {\n  // This line is important. It ensures that this function can\'t be called in the future.\n  // If you remove this check, someone could call your constructor function and reset your smart contract.\n  assert(Context.isDeployingContract());\n\n  // Set the greeting message in the contract storage\n  Storage.set(GREETING_KEY, "Hello, World!");\n\n  // Emit an event to notify that the greeting message has been set\n  generateEvent(`Greeting has been set`);\n}\n'})}),"\n",(0,r.jsx)(t.p,{children:'At first glance, it may seems like a lot of code for a simple "Hello, World!". But the code above is actually quite simple. Let\'s break it down:'}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.strong,{children:"Importing the necessary packages from Massa AssemblyScript SDK"})}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-tsx",children:'import { generateEvent, Storage, Context } from "@massalabs/massa-as-sdk";\n'})}),"\n",(0,r.jsx)(t.p,{children:"Here we are importing the necessary functions from the Massa AssemblyScript SDK. The Massa AssemblyScript software development kit (SDK) is a collection of functions and objects that wrap the ABIs exposed by the node."}),"\n",(0,r.jsx)(t.admonition,{type:"info",children:(0,r.jsxs)(t.p,{children:["If you are familiar with Solidity smart contracts, you will soon notice that some object provided by Massa AssemblyScript SDK are very similar to the ones provided by the Solidity SDK. For example, the ",(0,r.jsx)(t.code,{children:"Context"})," object is very similar to the ",(0,r.jsx)(t.code,{children:"msg"})," object in Solidity. It exposes methods such as ",(0,r.jsx)(t.code,{children:"Context.transferredCoins()"})," which would translate to ",(0,r.jsx)(t.code,{children:"msg.value"})," in Solidity. ",(0,r.jsx)(t.code,{children:"Context.caller()"})," would return the address of the function caller like ",(0,r.jsx)(t.code,{children:"msg.sender"})," in solidity. Similarly, the ",(0,r.jsx)(t.code,{children:"generateEvent"})," function is very similar to the ",(0,r.jsx)(t.code,{children:"emit"})," function in Solidity, etc.\nYou can learn more about the Massa AssemblyScript SDK ",(0,r.jsx)(t.a,{href:"/docs/build/smart-contract/sdk",children:"here"}),"."]})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.strong,{children:"The constructor function"})}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-tsx",children:"export function constructor(_: StaticArray<u8>): void {\n  assert(Context.isDeployingContract());\n"})}),"\n",(0,r.jsxs)(t.p,{children:["This is the constructor function. It is called only once when the contract is being deployed. The constructor function takes a parameter of type ",(0,r.jsx)(t.code,{children:"StaticArray<u8>"}),". This parameter is not used in this example, so we are ignoring it by using the ",(0,r.jsx)(t.code,{children:"_"})," symbol. The ",(0,r.jsx)(t.code,{children:"Context.isDeployingContract()"})," function is used to check if the contract is being deployed. If it is not, the function throws and the rest of the code is not executed. It ensures that the constructor function can't be called in the future. If you remove this check, someone could call your constructor function and reset your smart contract."]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.strong,{children:"Setting the greeting message in the contract storage"})}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-tsx",children:'Storage.set("greeting", "Hello, World!");\n'})}),"\n",(0,r.jsxs)(t.p,{children:["This line sets the greeting message in the contract storage. The ",(0,r.jsx)(t.code,{children:"Storage.set()"})," function takes two parameters: the key and the value. The key is a string that will be used to retrieve the value from the storage. The value can be of any type. In this example, we are using a string."]}),"\n",(0,r.jsx)(t.admonition,{type:"info",children:(0,r.jsxs)(t.p,{children:['In Massa, if you want some data to be persistent on the blockchain, you need to store it in the contract storage. If you are familiar with web development, you can think of the storage as the database of your application. The contract storage is a key-value store that can be used to store simple objects such as our "Hello, World!" string, or more complex objects such as serializable object arrays. Then the data can be retrieved from the storage using methods such has ',(0,r.jsx)(t.code,{children:"Storage.get()"})," or ",(0,r.jsx)(t.code,{children:"Storage.has()"})," provided by the SDK. You can learn more about how to handle the storage with Massa AS-SDK ",(0,r.jsx)(t.a,{href:"/docs/build/smart-contract/sdk#storage",children:"here"}),"."]})}),"\n",(0,r.jsx)(t.admonition,{type:"info",children:(0,r.jsxs)(t.p,{children:["In Massa, when writing to the persistent storage a.k.a the ledger, you need to pay for the storage space you will be using. The more data you store, the more you will have to pay. Similarly when you free-up some space from the ledger, you recover the amount of coins you paid to allocate the space. The price of storage is a fixed amount of Massa coins for each byte of data (0.001 MAS per byte). You can learn more about storage cost in Massa smart contracts ",(0,r.jsx)(t.a,{href:"/docs/learn/storage-costs",children:"here"}),"."]})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.strong,{children:"Emitting an event"})}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-tsx",children:"generateEvent(`Greeting has been set`);\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Here, we are emitting an event to notify that the greeting message has been set. Events are a great way to notify the front ends of a dApp that something has happened. They are similar to events in Solidity. You can learn more about events ",(0,r.jsx)(t.a,{href:"/docs/build/smart-contract/sdk#utilities",children:"here"}),"."]}),"\n",(0,r.jsx)(t.p,{children:"Now that we have written our smart contract, let's deploy it to the blockchain."}),"\n",(0,r.jsx)(t.h4,{id:"step-2-compile-your-smart-contract",children:"Step 2: Compile Your Smart Contract"}),"\n",(0,r.jsx)(t.p,{children:"In your project directory, run the following command to compile your smart contract into a WebAssembly (Wasm) file:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"npm run build\n"})}),"\n",(0,r.jsx)(t.admonition,{type:"info",children:(0,r.jsxs)(t.p,{children:["This command compiles your ",(0,r.jsx)(t.code,{children:"main.ts"})," contract into a ",(0,r.jsx)(t.code,{children:"main.wasm"})," file generated in the ",(0,r.jsx)(t.code,{children:"build"})," directory. This main.wasm file is the compiled version of your smart contract that will be deployed to the blockchain."]})}),"\n",(0,r.jsx)(t.h4,{id:"step-3-deploy-the-smart-contract",children:"Step 3: Deploy the Smart Contract"}),"\n",(0,r.jsxs)(t.p,{children:["Now that your smart contract is compiled and ready, let's deploy it to the Massa blockchain.\nYou first need some funds in your wallet that you can request from the ",(0,r.jsx)(t.a,{href:"/docs/build/networks-faucets/public-networks",children:"faucet"}),".\nYou can then run the following command in your project directory:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"npm run deploy\n"})}),"\n",(0,r.jsx)(t.p,{children:"Upon successful execution, the console should display the operation id that you can use to track the deployment of your smart contract."}),"\n",(0,r.jsxs)(t.admonition,{type:"info",children:[(0,r.jsx)(t.p,{children:"After deployment, an event will be displayed in the console. This event contains the address of your deployed smart contract and the event message set in the constructor function."}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"Contract deployed at: AS1v3HJroUxyUYzErpnbYCx9GoRNWysRgwM9h27yfNe4WUFvhctg\n"})}),(0,r.jsx)(t.p,{children:"Keep the address of your deployed smart contract handy. You'll need it later."})]}),"\n",(0,r.jsx)(t.h2,{id:"the-frontend",children:"The Frontend"}),"\n",(0,r.jsx)(t.p,{children:"Now that our smart contract is deployed, let's move on to the front end of your dApp. We'll use React with TypeScript to build a user interface that will interact with our deployed smart contract on the Massa blockchain. It will fetch the greeting message from the contract storage and display it to the user."}),"\n",(0,r.jsx)(t.p,{children:"Sounds fun, doesn't it? Let's get started!"}),"\n",(0,r.jsx)(t.h3,{id:"setting-up-your-project-1",children:"Setting Up Your Project"}),"\n",(0,r.jsx)(t.p,{children:"To set up your frontend project, follow these steps:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.strong,{children:"Step 1: Initialize Your React Application"})}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"First, open your terminal, navigate to your desired directory, and execute the following command to create a new React project:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"npx create-react-app my-app --template typescript\n"})}),"\n",(0,r.jsx)(t.admonition,{type:"info",children:(0,r.jsx)(t.p,{children:"The --template typescript flag sets up a TypeScript template for our React application."})}),"\n",(0,r.jsx)(t.p,{children:"After the installation is complete, navigate to your project folder."}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.strong,{children:"Step 2: Installing Massa Web3"})}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["Next up, we are going to install the ",(0,r.jsx)(t.a,{href:"https://github.com/massalabs/massa-web3",children:"Massa Web3 package"}),". This package enables our front end to interact with the Massa blockchain. If you are familiar with the EVM ecosystem, ",(0,r.jsx)(t.code,{children:"massa-web3"})," would be the equivalent of ",(0,r.jsx)(t.code,{children:"web3"})," or ",(0,r.jsx)(t.code,{children:"ethers"})," librairies, but for the Massa blockchain. Here's how to install it:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"npm install @massalabs/massa-web3@next\n"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.strong,{children:"Step 3: Configure Webpack"})}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"To customize the Webpack configuration in a create-react-app project, you'll need to use react-app-rewired because create-react-app hides Webpack configuration by default."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"npm install react-app-rewired --save-dev\n"})}),"\n",(0,r.jsx)(t.p,{children:"In the root of your project, create a config-overrides.js file:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",children:"const webpack = require('webpack');\n\nmodule.exports = function override(config) {\n  config.resolve.fallback = {\n    fs: false,\n    crypto: false,\n    buffer: require.resolve('buffer/'),\n  };\n\n  config.plugins.push(\n    new webpack.ProvidePlugin({\n      Buffer: ['buffer', 'Buffer'],\n      process: 'process/browser',\n    })\n  );\n\n  return config;\n};\n"})}),"\n",(0,r.jsx)(t.p,{children:"You'll need to update the scripts section in your package.json to use react-app-rewired instead of the default react-scripts:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-json",children:'"scripts": {\n  "start": "react-app-rewired start",\n  "build": "react-app-rewired build",\n  "test": "react-app-rewired test",\n  "eject": "react-scripts eject"\n}\n'})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.strong,{children:"Step 4: Building the Frontend"})}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"Now that we have our dependencies installed, let's begin building the front end of our dApp."}),"\n",(0,r.jsxs)(t.p,{children:["Before writing our component, navigate to the src folder and locate the ",(0,r.jsx)(t.code,{children:"App.tsx"})," file."]}),"\n",(0,r.jsxs)(t.p,{children:["This ",(0,r.jsx)(t.code,{children:"App.tsx"})," file serves as the main entry point for your application. Replace the content of this file with the following code:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-tsx",children:'import { bytesToStr, JsonRPCClient } from "@massalabs/massa-web3";\nimport { useEffect, useState } from "react";\n\nconst sc_addr = "SC_ADDRESS"; // TODO Update with your deployed contract address\n\n/**\n * The key used to store the greeting in the smart contract\n */\nconst GREETING_KEY = "greeting_key";\n\n/**\n * Content component that handles interactions with a Massa smart contract\n * @returns The rendered component\n */\nfunction Content() {\n\n  const [greeting, setGreeting] = useState<string | null>(null);\n\n    /**\n   * Initialize the web3 client\n   */\n  const client = JsonRPCClient.buildnet()\n\n  /**\n   * Fetch the greeting when the web3 client is initialized\n   */\n  useEffect(() => {\n    getGreeting();\n  });\n\n  /**\n   * Function to get the current greeting from the smart contract\n   */\n  async function getGreeting() {\n    if (client) {\n      const dataStoreVal = await client.getDatastoreEntry(GREETING_KEY, sc_addr, false)\n      const greetingDecoded = bytesToStr(dataStoreVal);\n      setGreeting(greetingDecoded);\n    }\n  }\n\n  return (\n    <div\n      style={{\n        display: "flex",\n        flexDirection: "column",\n        justifyContent: "center",\n        alignItems: "center",\n        height: "100vh",\n      }}\n    >\n      <div>Greeting: {greeting}</div>\n    </div>\n  );\n}\n\nexport default Content;\n'})}),"\n",(0,r.jsx)(t.admonition,{type:"info",children:(0,r.jsxs)(t.p,{children:["Make sure to replace ",(0,r.jsx)(t.code,{children:"SC_ADDRESS"})," with your own smart contract address."]})}),"\n",(0,r.jsx)(t.h3,{id:"understanding-the-code",children:"Understanding the Code"}),"\n",(0,r.jsx)(t.p,{children:"Our code might seem like a mouthful at first, but let's break it down into smaller, digestible parts:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.strong,{children:"Setting Up the Client"})}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-tsx",children:"  const client = JsonRPCClient.buildnet()\n"})}),"\n",(0,r.jsx)(t.p,{children:"In order to interact with the blockchain, our front end application is going to need a client. A client is a piece of software that can be used to interact with a service; in our case the service is the Massa blockchain and we will use the client's methods to interact with our smart contract."}),"\n",(0,r.jsxs)(t.p,{children:["In the code above, we are using the ",(0,r.jsx)(t.code,{children:"JsonRPCClient.buildnet()"})," method to initialize our client using public buildnet RPC."]}),"\n",(0,r.jsx)(t.admonition,{type:"info",children:(0,r.jsxs)(t.p,{children:["The buildnet is a test network that is used to test smart contracts before deploying them to the mainnet. It is similar to the Ethereum Sepolia network. You can learn more about Massa networks ",(0,r.jsx)(t.a,{href:"/docs/build/networks-faucets/public-networks",children:"here"}),"."]})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.strong,{children:"Retrieving the Greeting"})}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-tsx",children:"  async function getGreeting() {\n    if (client) {\n      const dataStoreVal = await client.getDatastoreEntry(GREETING_KEY, sc_addr, false)\n      const greetingDecoded = bytesToStr(dataStoreVal);\n      setGreeting(greetingDecoded);\n    }\n  }\n"})}),"\n",(0,r.jsx)(t.p,{children:'In the code above, we are retrieving the "Hello, World!" greeting message by directly reading the smart contract\'s storage.'}),"\n",(0,r.jsxs)(t.p,{children:["To do so, we are using the ",(0,r.jsx)(t.code,{children:"getDatastoreEntry"}),' method.\nIn our case, the address of the smart contract is the one we got during contract deployment. The key is the string "greeting_key" ',(0,r.jsx)(t.a,{href:"#step-1-writing-the-smart-contract",children:"that we used to store the greeting message in the smart contract's storage"}),".\nWe retrieve the current greeting from the smart contract's storage and decode it using the ",(0,r.jsx)(t.code,{children:"bytesToStr"})," function. Finally, we set the greeting to the ",(0,r.jsx)(t.code,{children:"greeting"})," state variable using the ",(0,r.jsx)(t.code,{children:"setGreeting"})," function."]}),"\n",(0,r.jsx)(t.admonition,{type:"info",children:(0,r.jsxs)(t.p,{children:["The storage of the smart contract is a key value store that stores data in bytes. Thus, we need to decode the bytes returned by the smart contract to get the actual greeting message. That is why we have to use massa-web3 ",(0,r.jsx)(t.code,{children:"bytesToStr"})," function."]})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.strong,{children:"User Interface"})}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"The user interface consists of a centered text display that shows the current greeting fetched from your smart contract's storage."}),"\n",(0,r.jsx)(t.h2,{id:"testing-your-application",children:"Testing your application"}),"\n",(0,r.jsx)(t.p,{children:"Finally, let's start our application and perform some basic user acceptance testing!"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"npm run start\n"})}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:["Open your web browser and navigate to ",(0,r.jsx)(t.a,{href:"http://localhost:3000",children:"http://localhost:3000"})]}),"\n",(0,r.jsx)(t.li,{children:'Here, you should see a greeting that says "Hello, World!" This is the message that was set in your smart contract.'}),"\n",(0,r.jsx)(t.li,{children:"If you're able to see this greeting, your dApp is functioning correctly."}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"\ud83c\udf89 Congratulations on building and testing your first dApp!"}),"\n",(0,r.jsx)(t.p,{children:"Remember, Rome wasn't built in a day, and neither are amazing dApps! Keep learning!"}),"\n",(0,r.jsx)(t.h2,{id:"next-steps",children:"Next steps"}),"\n",(0,r.jsx)(t.p,{children:"Congratulations on writing and testing your first dApp using the Massa blockchain! You've taken a crucial step in your blockchain development journey."}),"\n",(0,r.jsx)(t.p,{children:"There's always more to learn. To continue exploring and expanding your knowledge, you can:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["Review more detailed guides on ",(0,r.jsx)(t.a,{href:"/docs/build/smart-contract/intro",children:"smart contract development"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:["Check out more ",(0,r.jsx)(t.a,{href:"/docs/tutorial/home",children:"complex examples"})," of dApps built on Massa."]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>a});var r=n(6540);const s={},o=r.createContext(s);function i(e){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(o.Provider,{value:t},e.children)}}}]);