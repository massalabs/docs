{
  "walletGenerateNewAccount": "    const newAccount: IAccount = await WalletClient.walletGenerateNewAccount();\n    console.log('New account address:', newAccount.address);",
  "getAccountFromSecretKey": "    const deployerAccount: IAccount =\n      await WalletClient.getAccountFromSecretKey(deployerSecretKey);\n    console.log('Deployer account address', deployerAccount.address);",
  "addAccountsToWallet": "    await web3Client\n      .wallet()\n      .addAccountsToWallet([deployerAccount, newAccount]);",
  "addSecretKeysToWallet": "    const addedAccounts: IAccount[] = await web3Client\n      .wallet()\n      .addSecretKeysToWallet([secondAccSecretKey]);\n    console.log(`Added accounts to the wallet: ${addedAccounts.length}`);",
  "setBaseAccount": "    await web3Client.wallet().setBaseAccount(deployerAccount);\n    console.log(`Base account of the wallet: ${deployerAccount.address}`);",
  "getBaseAccount": "    const baseAccount: IAccount | null = web3Client.wallet().getBaseAccount();\n    if (baseAccount === null) {\n      throw new Error('No base account found');\n    }\n    console.log(`Base account of the wallet: ${baseAccount.address}`);",
  "getWalletAccountsByAddress": "    const retrievedAccount = await web3Client\n      .wallet()\n      .getWalletAccountByAddress(deployerAccount.address as string);\n    if (!retrievedAccount) {\n      throw new Error(\n        `Account with address ${deployerAccount.address} not found.`,\n      );\n    }\n    const deployerAccountRetrieved: IAccount = retrievedAccount;\n    console.log(\n      `Retrieved account address: ${deployerAccountRetrieved.address}`,\n    );",
  "getWalletAccounts": "    const allWalletAccounts: IAccount[] = await web3Client\n      .wallet()\n      .getWalletAccounts();\n    console.log(\n      `All wallet accounts: ${allWalletAccounts.map(\n        (account: IAccount) => account.address,\n      )}`,\n    );",
  "removeAddressesFromWallet": "    await web3Client\n      .wallet()\n      .removeAddressesFromWallet([newAccount.address as string]);\n    console.log(`Removed account ${newAccount.address} from the wallet`);",
  "cleanWallet": "    await web3Client.wallet().cleanWallet();\n    console.log('All wallet accounts removed');",
  "getAccountBalance": "    const balance: IBalance | null = await web3Client\n      .wallet()\n      .getAccountBalance(newAccount.address as string);\n    if (balance === null) {\n      throw new Error('No balance found for newAccount');\n    }\n    console.log(\n      `Balance of newAccount ${newAccount.address}: ${balance.final} MASSA`,\n    );",
  "WalletInfo": "    const walletInfo: IFullAddressInfo[] = await web3Client\n      .wallet()\n      .walletInfo();\n    console.log(\n      'Wallet info addresses: ',\n      walletInfo.map((info) => info.address),\n    );",
  "sendTransaction": "    const transactionData: ITransactionData = {\n      fee: 0n,\n      amount: fromMAS(1),\n      recipientAddress: newAccount.address as string,\n    };\n    const sendTxId: Array<string> = await web3Client\n      .wallet()\n      .sendTransaction(transactionData);\n    const startBalance: IBalance | null = await web3Client\n      .wallet()\n      .getAccountBalance(newAccount.address as string);\n    console.log(`Transaction sent with id: ${sendTxId}`);\n    // Await finalization\n    await web3Client\n      .smartContracts()\n      .awaitRequiredOperationStatus(sendTxId[0], EOperationStatus.FINAL);\n    console.log(`Transaction ${sendTxId} finalized`);",
  "walletSignMessage": "    const signature: ISignature = await WalletClient.walletSignMessage(\n      'Hello world',\n      baseAccount,\n    );\n    console.log(`Signature created: ${signature.base58Encoded}`);",
  "signMessage": "    const signedMessage = await web3Client\n      .wallet()\n      .signMessage('hello', baseAccount.address as string);\n    console.log(`Signed message: ${signedMessage.base58Encoded}`);",
  "verifySignature": "    const isSignatureValid: boolean = await web3Client\n      .wallet()\n      .verifySignature(\n        'Hello world',\n        signature,\n        baseAccount.publicKey as string,\n      );\n    console.log(`isSignatureValid: ${isSignatureValid}`);",
  "buyRolls": "    const transactionDataRolls: IRollsData = {\n      fee: 0n,\n      amount: 1n,\n    };\n    const buyRollsTxId: Array<string> = await web3Client\n      .wallet()\n      .buyRolls(transactionDataRolls, deployerAccount as IAccount);\n    // Await finalization\n    console.log(`Transaction sent with id: ${buyRollsTxId}`);\n    await web3Client\n      .smartContracts()\n      .awaitRequiredOperationStatus(buyRollsTxId[0], EOperationStatus.FINAL);\n    console.log(`Transaction ${buyRollsTxId} finalized`);",
  "sellRolls": "    const sellRollsTxId: Array<string> = await web3Client\n      .wallet()\n      .sellRolls(transactionDataRolls, baseAccount as IAccount);\n    // Await finalization\n    await web3Client\n      .smartContracts()\n      .awaitRequiredOperationStatus(sellRollsTxId[0], EOperationStatus.FINAL);\n    console.log(`Transaction ${sellRollsTxId} finalized`);"
}